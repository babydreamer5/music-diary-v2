import React, { useState, useEffect, useCallback } from 'react';      
import { auth, db, googleProvider } from './firebase';      
import {      
  signInWithEmailAndPassword,      
  signInWithPopup,      
  createUserWithEmailAndPassword,      
  signOut,      
  onAuthStateChanged,      
  User      
} from 'firebase/auth';      
import {      
  collection,      
  addDoc,      
  getDocs,      
  doc,      
  updateDoc,      
  deleteDoc,      
  query,      
  orderBy,      
  where,      
  serverTimestamp,      
  Timestamp      
} from 'firebase/firestore';      
import { searchMusicByEmotion } from './musicData';

// Í∏∞Î≥∏ ÏÑ§Ï†ï      
const APP_THEME = {      
  name: 'Ïù¥ÌîåÎ†àÏù¥ ÌçºÌîå',      
  primary: 'from-purple-500 to-pink-500',      
  secondary: 'from-purple-100 to-pink-100',      
  accent: 'purple-500',      
  bgClass: 'from-purple-100 to-pink-100'      
};      
const AI_NAME = "ÌïòÎ™®Îãà";

// ÌÉÄÏûÖ Ï†ïÏùò      
interface DiaryEntry {      
  id: string;      
  userId: string;      
  date: string;      
  time: string;      
  mood: 'good' | 'normal' | 'bad';      
  summary: string;      
  keywords: string[];      
  selectedEmotions: string[];      
  musicPlayed: MusicItem[];      
  chatMessages: ChatMessage[];      
  experienceGained: number;      
  actionItems: string[];      
  deletedAt?: string | null;      
  createdAt: Timestamp | Date | any;      
}

interface MusicItem {      
  id: string;      
  title: string;      
  artist: string;      
  genre: string;      
  thumbnail: string;      
  url: string;      
  publishedAt: string;      
  rating?: number;      
  playCount?: number;      
  preview_url?: string;      
  album?: string;      
  source: 'spotify' | 'youtube';      
  youtubeUrl?: string;      
}

interface ChatMessage {      
  role: 'user' | 'assistant';      
  content: string;      
  timestamp: Date;      
  musicRecommendation?: MusicItem | null;      
  hasMusic?: boolean;      
}

interface UserProgress {      
  level: number;      
  experience: number;      
  totalEntries: number;      
  consecutiveDays: number;      
  expToNext: number;      
  progressPercentage: number;      
  isPremium: boolean;      
}

interface AppSettings {      
  isPremium: boolean;      
  notifications: boolean;      
  musicPreferences: string[];      
}

interface SummaryData {  
  summary: string;  
  keywords: string[];  
  recommendedEmotions: string[];  
  actionItems: string[];  
  recommendedMusic?: MusicItem[];  
}

// ÏÉÅÏàò Ï†ïÏùò      
const MAX_FREE_TOKENS = 100000;      
const LEVEL_SYSTEM = {      
  experienceBase: {      
    1: 0, 2: 100, 3: 250, 4: 450, 5: 700,      
    6: 1000, 7: 1350, 8: 1750, 9: 2200, 10: 2700,      
    11: 3250, 12: 3850, 13: 4500, 14: 5200, 15: 6000      
  },      
  experienceGain: {      
    diaryWrite: 20,      
    musicSession: 10,      
    consecutiveDays: 25,      
    musicRating: 5,      
    friendShare: 15,      
    achievementUnlock: 50      
  }      
};

const MUSIC_GENRES = [    
  { id: 'k-pop', name: 'K-Pop', emoji: 'üéµ' },    
  { id: 'pop', name: 'Ìåù', emoji: 'üé§' },    
  { id: 'ballad', name: 'Î∞úÎùºÎìú', emoji: 'üíô' },    
  { id: 'r&b', name: 'R&B', emoji: 'üé∂' },    
  { id: 'hip-hop', name: 'ÌûôÌï©', emoji: 'üé§' },    
  { id: 'indie', name: 'Ïù∏Îîî', emoji: 'üé∏' },    
  { id: 'classic', name: 'ÌÅ¥ÎûòÏãù', emoji: 'üéº' },    
  { id: 'jazz', name: 'Ïû¨Ï¶à', emoji: 'üé∫' },    
  { id: 'electronic', name: 'ÏùºÎ†âÌä∏Î°úÎãâ', emoji: 'üéõÔ∏è' },    
  { id: 'rock', name: 'Î°ù', emoji: 'ü§ò' }    
];

const App: React.FC = () => {      
  // ÏÉÅÌÉú Í¥ÄÎ¶¨      
  const [user, setUser] = useState<User | null>(null);      
  const [isAuthMode, setIsAuthMode] = useState<'login' | 'register'>('login');      
  const [email, setEmail] = useState('');      
  const [password, setPassword] = useState('');      
  const [isLoading, setIsLoading] = useState(false);      
  const [currentStep, setCurrentStep] = useState<'auth' | 'onboard-name' | 'onboard-music' | 'mood' | 'chat' | 'summary' | 'stats' | 'settings' | 'trash' | 'calendar' | 'search' | 'myDiary' | 'myMusic'>('auth');      
  const [currentMood, setCurrentMood] = useState<'good' | 'normal' | 'bad' | null>(null);      
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);      
  const [diaryEntries, setDiaryEntries] = useState<DiaryEntry[]>([]);      
  const [trashEntries, setTrashEntries] = useState<DiaryEntry[]>([]);      
  const [personalMusic, setPersonalMusic] = useState<MusicItem[]>([]);      
  const [searchQuery, setSearchQuery] = useState('');      
  const [currentCalendarMonth, setCurrentCalendarMonth] = useState(new Date());      
  const [summaryData, setSummaryData] = useState<SummaryData | null>(null);      
  const [selectedEmotions, setSelectedEmotions] = useState<string[]>([]);      
  const [userMainEmotion, setUserMainEmotion] = useState('');      
  const [userProgress, setUserProgress] = useState<UserProgress>({      
    level: 1,      
    experience: 0,      
    totalEntries: 0,      
    consecutiveDays: 0,      
    expToNext: 100,      
    progressPercentage: 0,      
    isPremium: false      
  });      
  const [appSettings, setAppSettings] = useState<AppSettings>({      
    isPremium: false,      
    notifications: true,      
    musicPreferences: []    
  });      
  const [currentInput, setCurrentInput] = useState("");      
  const [tokenUsage, setTokenUsage] = useState(0);      
  const [expandedDiaryId, setExpandedDiaryId] = useState<string | null>(null);      
  const [conversationCount, setConversationCount] = useState(0);      
  const [spotifyToken, setSpotifyToken] = useState<string | null>(null);      
  const [hasRecommendedMusic, setHasRecommendedMusic] = useState(false);      
  const [recommendedMusicForSummary, setRecommendedMusicForSummary] = useState<MusicItem[]>([]);    
      
  // Ïò®Î≥¥Îî© Í¥ÄÎ†® ÏÉÅÌÉú    
  const [selectedPersonType, setSelectedPersonType] = useState('');    
  const [selectedMusicGenres, setSelectedMusicGenres] = useState<string[]>([]);

  // API ÌÇ§ ÏÑ§Ï†ï      
  const OPENAI_API_KEY = process.env.REACT_APP_OPENAI_API_KEY;      
  const SPOTIFY_CLIENT_ID = process.env.REACT_APP_SPOTIFY_CLIENT_ID;      
  const SPOTIFY_CLIENT_SECRET = process.env.REACT_APP_SPOTIFY_CLIENT_SECRET;      
  const YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY;

  // Firebase Ïù∏Ï¶ù ÏÉÅÌÉú Í∞êÏßÄ      
  useEffect(() => {      
    const unsubscribe = onAuthStateChanged(auth, async (user) => {      
      console.log('Auth state changed:', user?.uid);      
      setUser(user);      
      if (user) {      
        await loadUserData(user.uid);      
      } else {      
        setCurrentStep('auth');      
        setDiaryEntries([]);      
        setTrashEntries([]);      
        setPersonalMusic([]);      
        setRecommendedMusicForSummary([]);      
        setUserProgress({      
          level: 1,      
          experience: 0,      
          totalEntries: 0,      
          consecutiveDays: 0,      
          expToNext: 100,      
          progressPercentage: 0,      
          isPremium: false      
        });      
      }      
    });

    return () => unsubscribe();      
  }, []);

  // ÌôîÎ©¥ Ï†ÑÌôò Ïãú ÏùåÏïÖ Î¶¨Ïä§Ìä∏ ÏôÑÏ†Ñ Ï¥àÍ∏∞Ìôî      
  const handleStepChange = (newStep: typeof currentStep) => {      
    setRecommendedMusicForSummary([]);      
          
    if (currentStep === 'chat' && newStep !== 'chat' && newStep !== 'summary') {      
      setChatMessages(prev => prev.map(msg => ({ ...msg, musicRecommendation: undefined, hasMusic: false })));      
    }      
          
    setCurrentStep(newStep);      
  };

  const loadUserData = async (userId: string) => {      
    try {      
      console.log('Loading user data for:', userId);      
                    
      const diariesCollection = collection(db, 'diaries');      
      const diariesQuery = query(      
        diariesCollection,      
        where('userId', '==', userId)      
      );      
      const diariesSnapshot = await getDocs(diariesQuery);      
      const diariesData = diariesSnapshot.docs      
        .map(doc => ({      
          id: doc.id,      
          ...doc.data()      
        }))      
        .filter((entry: any) => !entry.deletedAt)      
        .sort((a: any, b: any) => {      
          const aTime = a.createdAt?.toDate?.() || new Date(a.createdAt);      
          const bTime = b.createdAt?.toDate?.() || new Date(b.createdAt);      
          return bTime.getTime() - aTime.getTime();      
        }) as DiaryEntry[];      
                    
      setDiaryEntries(diariesData);

      const trashData = diariesSnapshot.docs      
        .map(doc => ({      
          id: doc.id,      
          ...doc.data()      
        }))      
        .filter((entry: any) => entry.deletedAt)      
        .sort((a: any, b: any) => {      
          const aTime = new Date(a.deletedAt);      
          const bTime = new Date(b.deletedAt);      
          return bTime.getTime() - aTime.getTime();      
        }) as DiaryEntry[];      
                    
      setTrashEntries(trashData);

      const musicCollection = collection(db, 'personalMusic');      
      const musicQuery = query(      
        musicCollection,      
        where('userId', '==', userId)      
      );      
      const musicSnapshot = await getDocs(musicQuery);      
      const musicData = musicSnapshot.docs      
        .map(doc => ({      
          id: doc.id,      
          ...doc.data()      
        }))      
        .sort((a: any, b: any) => {      
          const aTime = a.createdAt?.toDate?.() || new Date(a.createdAt);      
          const bTime = b.createdAt?.toDate?.() || new Date(b.createdAt);      
          return bTime.getTime() - aTime.getTime();      
        }) as MusicItem[];      
                    
      setPersonalMusic(musicData);

      const progressCollection = collection(db, 'userProgress');      
      const progressQuery = query(      
        progressCollection,      
        where('userId', '==', userId)      
      );      
      const progressSnapshot = await getDocs(progressQuery);      
      if (!progressSnapshot.empty) {      
        const progressData = progressSnapshot.docs[0].data() as UserProgress;      
        setUserProgress(progressData);      
      }

      const settingsCollection = collection(db, 'appSettings');      
      const settingsQuery = query(      
        settingsCollection,      
        where('userId', '==', userId)      
      );      
      const settingsSnapshot = await getDocs(settingsQuery);      
      if (!settingsSnapshot.empty) {      
        const settingsData = settingsSnapshot.docs[0].data() as AppSettings;      
        setAppSettings(settingsData);    
            
        // Ïò®Î≥¥Îî© ÏôÑÎ£å Ïó¨Î∂Ä ÌôïÏù∏    
        if (settingsData.musicPreferences && settingsData.musicPreferences.length > 0) {    
          setCurrentStep('mood');    
        } else {    
          setCurrentStep('onboard-name');    
        }    
      } else {    
        setCurrentStep('onboard-name');    
      }    
                    
    } catch (error) {      
      console.error('Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïò§Î•ò:', error);      
    }      
  };

  const handleLogin = async () => {      
    if (!email || !password) {      
      alert('Ïù¥Î©îÏùºÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');      
      return;      
    }      
    setIsLoading(true);      
    try {      
      await signInWithEmailAndPassword(auth, email, password);      
    } catch (error: any) {      
      alert('Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ' + error.message);      
    } finally {      
      setIsLoading(false);      
    }      
  };

  const handleRegister = async () => {      
    if (!email || !password) {      
      alert('Ïù¥Î©îÏùºÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');      
      return;      
    }      
    setIsLoading(true);      
    try {      
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);      
      await initializeNewUser(userCredential.user.uid);      
    } catch (error: any) {      
      alert('ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå®: ' + error.message);      
    } finally {      
      setIsLoading(false);      
    }      
  };

  const handleGoogleLogin = async () => {      
    setIsLoading(true);      
    try {      
      const result = await signInWithPopup(auth, googleProvider);      
      const progressQuery = query(      
        collection(db, 'userProgress'),      
        where('userId', '==', result.user.uid)      
      );      
      const progressSnapshot = await getDocs(progressQuery);      
      if (progressSnapshot.empty) {      
        await initializeNewUser(result.user.uid);      
      }      
    } catch (error: any) {      
      alert('Google Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ' + error.message);      
    } finally {      
      setIsLoading(false);      
    }      
  };

  const initializeNewUser = async (userId: string) => {      
    try {      
      await addDoc(collection(db, 'userProgress'), {      
        userId,      
        level: 1,      
        experience: 0,      
        totalEntries: 0,      
        consecutiveDays: 0,      
        expToNext: 100,      
        progressPercentage: 0,      
        isPremium: false,      
        createdAt: serverTimestamp()      
      });

      await addDoc(collection(db, 'appSettings'), {      
        userId,      
        isPremium: false,      
        notifications: true,      
        musicPreferences: [],    
        createdAt: serverTimestamp()      
      });      
    } catch (error) {      
      console.error('ÏÉà ÏÇ¨Ïö©Ïûê Ï¥àÍ∏∞Ìôî Ïò§Î•ò:', error);      
    }      
  };

  const handleLogout = async () => {      
    try {      
      await signOut(auth);      
    } catch (error) {      
      console.error('Î°úÍ∑∏ÏïÑÏõÉ Ïò§Î•ò:', error);      
    }      
  };

  const getSpotifyToken = useCallback(async () => {      
    try {      
      if (!SPOTIFY_CLIENT_ID || !SPOTIFY_CLIENT_SECRET) {      
        console.error('Spotify ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ID ÎòêÎäî SecretÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');      
        return;      
      }

      const response = await fetch('https://accounts.spotify.com/api/token', {      
        method: 'POST',      
        headers: {      
          'Content-Type': 'application/x-www-form-urlencoded',      
          'Authorization': `Basic ${btoa(`${SPOTIFY_CLIENT_ID}:${SPOTIFY_CLIENT_SECRET}`)}`      
        },      
        body: 'grant_type=client_credentials'      
      });

      if (response.ok) {      
        const data = await response.json();      
        setSpotifyToken(data.access_token);      
      }      
    } catch (error) {      
      console.error('Spotify ÌÜ†ÌÅ∞ ÌöçÎìù Ïò§Î•ò:', error);      
    }      
  }, [SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET]);

  useEffect(() => {      
    getSpotifyToken();      
  }, [getSpotifyToken]);

  const formatDate = (date: Date) => date.toLocaleDateString('ko-KR');      
  const formatTime = (date: Date) => date.toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit' });

  const getMoodEmoji = (mood: string) => {      
    switch (mood) {      
      case 'good': return 'üòä';      
      case 'normal': return 'üòê';      
      case 'bad': return 'üòî';      
      default: return '‚ùì';      
    }      
  };

  const getMoodText = (mood: string) => {      
    switch (mood) {      
      case 'good': return 'Ï¢ãÏùå';      
      case 'normal': return 'Î≥¥ÌÜµ';      
      case 'bad': return 'ÎÇòÏÅ®';      
      default: return 'ÏÑ†ÌÉù ÏïàÌï®';      
    }      
  };

  const calculateLevel = (experience: number) => {      
    for (let level = 15; level >= 1; level--) {      
      if (experience >= LEVEL_SYSTEM.experienceBase[level as keyof typeof LEVEL_SYSTEM.experienceBase]) {      
        return level;      
      }      
    }      
    return 1;      
  };

  const updateExperience = async (expGained: number) => {      
    if (!user) return;

    const newExp = userProgress.experience + expGained;      
    const level = calculateLevel(newExp);      
    const currentLevelExp = LEVEL_SYSTEM.experienceBase[level as keyof typeof LEVEL_SYSTEM.experienceBase] || 0;      
    const nextLevelExp = LEVEL_SYSTEM.experienceBase[(level + 1) as keyof typeof LEVEL_SYSTEM.experienceBase] || newExp;      
    const expToNext = nextLevelExp - newExp;      
    const expProgress = newExp - currentLevelExp;      
    const expNeeded = nextLevelExp - currentLevelExp;      
    const progressPercentage = expNeeded > 0 ? (expProgress / expNeeded) * 100 : 100;

    const updatedProgress = {      
      ...userProgress,      
      level,      
      experience: newExp,      
      expToNext: Math.max(0, expToNext),      
      progressPercentage: Math.min(100, progressPercentage),      
      totalEntries: userProgress.totalEntries + (expGained === LEVEL_SYSTEM.experienceGain.diaryWrite ? 1 : 0)      
    };

    setUserProgress(updatedProgress);

    try {      
      const progressQuery = query(      
        collection(db, 'userProgress'),      
        where('userId', '==', user.uid)      
      );      
      const progressSnapshot = await getDocs(progressQuery);      
      if (!progressSnapshot.empty) {      
        await updateDoc(doc(db, 'userProgress', progressSnapshot.docs[0].id), updatedProgress);      
      }      
    } catch (error) {      
      console.error('Í≤ΩÌóòÏπò ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', error);      
    }

    if (level > userProgress.level) {      
      alert(`Ï∂ïÌïòÌï©ÎãàÎã§! Î†àÎ≤® ${level}Î°ú Î†àÎ≤®ÏóÖÌñàÏäµÎãàÎã§!`);      
    }      
  };

  const moveToTrash = async (entry: DiaryEntry) => {      
    if (!user) return;      
    try {      
      await updateDoc(doc(db, 'diaries', entry.id), {      
        deletedAt: serverTimestamp()      
      });      
      setDiaryEntries(prev => prev.filter(e => e.id !== entry.id));      
      setTrashEntries(prev => [...prev, { ...entry, deletedAt: new Date().toISOString() }]);      
    } catch (error) {      
      console.error('Ìú¥ÏßÄÌÜµ Ïù¥Îèô Ïò§Î•ò:', error);      
    }      
  };

  const restoreFromTrash = async (entry: DiaryEntry) => {      
    if (!user) return;      
    try {      
      await updateDoc(doc(db, 'diaries', entry.id), {      
        deletedAt: null      
      });      
      const restoredEntry = { ...entry, deletedAt: null };      
      setDiaryEntries(prev => [...prev, restoredEntry]);      
      setTrashEntries(prev => prev.filter(e => e.id !== entry.id));      
    } catch (error) {      
      console.error('Î≥µÏõê Ïò§Î•ò:', error);      
    }      
  };

  const searchDiaries = (query: string): DiaryEntry[] => {      
    if (!query.trim()) return [];      
    const lowerQuery = query.toLowerCase();      
    return diaryEntries.filter(entry =>       
      entry.summary.toLowerCase().includes(lowerQuery) ||      
      (entry.keywords && entry.keywords.some(keyword => keyword.toLowerCase().includes(lowerQuery))) ||      
      (entry.selectedEmotions && entry.selectedEmotions.some(emotion => emotion.toLowerCase().includes(lowerQuery))) ||      
      (entry.musicPlayed && entry.musicPlayed.some(music => music.title.toLowerCase().includes(lowerQuery))) ||      
      (entry.actionItems && entry.actionItems.some(action => action.toLowerCase().includes(lowerQuery)))      
    );      
  };

  const callOpenAI = async (messages: any[], systemPrompt: string) => {      
    if (!OPENAI_API_KEY) {      
      throw new Error('OpenAI API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');      
    }

    if (tokenUsage >= MAX_FREE_TOKENS) {      
      throw new Error('AIÏôÄ ÎåÄÌôîÌï† Ïàò ÏûàÎäî ÏóêÎÑàÏßÄÍ∞Ä Îã§ Îñ®Ïñ¥Ï°åÏäµÎãàÎã§.');      
    }

    try {      
      const response = await fetch('https://api.openai.com/v1/chat/completions', {      
        method: 'POST',      
        headers: {      
          'Content-Type': 'application/json',      
          'Authorization': `Bearer ${OPENAI_API_KEY}`      
        },      
        body: JSON.stringify({      
          model: 'gpt-4o-mini',      
          messages: [      
            { role: 'system', content: systemPrompt },      
            ...messages      
          ],      
          max_tokens: 300,      
          temperature: 0.7      
        })      
      });

      if (!response.ok) {      
        throw new Error(`OpenAI API Ïò§Î•ò: ${response.status}`);      
      }

      const data = await response.json();      
      const tokensUsed = data.usage?.total_tokens || 0;      
      setTokenUsage(prev => prev + tokensUsed);      
      return data.choices[0].message.content || '';      
    } catch (error) {      
      console.error('OpenAI Ìò∏Ï∂ú ÏóêÎü¨:', error);      
      throw error;      
    }      
  };

  const searchSpotifyMusic = async (query: string): Promise<MusicItem[]> => {      
    if (!spotifyToken) return [];      
    try {      
      const response = await fetch(      
        `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=track&market=KR&limit=20`,      
        { headers: { 'Authorization': `Bearer ${spotifyToken}` } }      
      );      
      if (!response.ok) return [];      
      const data = await response.json();      
      return data.tracks?.items?.slice(0, 10).map((item: any) => ({      
        id: item.id,      
        title: item.name,      
        artist: item.artists.map((artist: any) => artist.name).join(', '),      
        genre: 'recommended',      
        thumbnail: item.album.images[0]?.url || '',      
        url: item.external_urls.spotify,      
        publishedAt: '',      
        preview_url: item.preview_url,      
        album: item.album.name,      
        source: 'spotify'      
      })) || [];      
    } catch (error) {      
      return [];      
    }      
  };

  const searchYouTubeMusic = async (query: string, isOfficialSearch: boolean = false): Promise<MusicItem[]> => {      
    if (!YOUTUBE_API_KEY) return [];      
    try {      
      const searchQuery = isOfficialSearch ? `${query} official MV` : `${query} 2024 2025 latest`;      
      const url = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(searchQuery)}&type=video&maxResults=10&order=relevance&videoDuration=medium&regionCode=KR&key=${YOUTUBE_API_KEY}`;      
      const response = await fetch(url);      
      if (!response.ok) return [];      
      const data = await response.json();      
      return data.items?.slice(0, 3).map((item: any) => ({      
        id: item.id.videoId,      
        title: item.snippet.title || 'Unknown Title',      
        artist: item.snippet.channelTitle || 'Unknown Artist',      
        genre: 'recommended',      
        thumbnail: item.snippet.thumbnails?.medium?.url || '',      
        url: `https://www.youtube.com/watch?v=${item.id.videoId}`,      
        publishedAt: item.snippet.publishedAt || '',      
        source: 'youtube'      
      })) || [];      
    } catch (error) {      
      return [];      
    }      
  };

  const searchMusic = async (query: string, isUserRequest: boolean = false): Promise<MusicItem[]> => {      
    if (isUserRequest) {      
      const youtubeResults = await searchYouTubeMusic(query, true);      
      if (youtubeResults.length > 0) return youtubeResults.slice(0, 1);      
    }      
                  
    const spotifyResults = await searchSpotifyMusic(query);      
    const youtubeResults = await searchYouTubeMusic(query);      
    const results = [...spotifyResults.slice(0, 2), ...youtubeResults.slice(0, 1)];      
                  
    if (results.length < 3) {      
      const additionalYoutube = youtubeResults.slice(1, 3 - results.length + 1);      
      results.push(...additionalYoutube);      
    }      
                  
    return results.slice(0, 3);      
  };

  const addToPersonalMusic = async (music: MusicItem) => {      
    if (!user) return;      
    try {      
      const existing = personalMusic.find(m => m.id === music.id);      
      if (!existing) {      
        const newMusic = { ...music, playCount: 1, userId: user.uid, createdAt: serverTimestamp() };      
        const docRef = await addDoc(collection(db, 'personalMusic'), newMusic);      
        setPersonalMusic(prev => [...prev, { ...newMusic, id: docRef.id }]);      
      }      
    } catch (error) {      
      console.error('ÏùåÏïÖ Ï∂îÍ∞Ä Ïò§Î•ò:', error);      
    }      
  };

  const removeFromPersonalMusic = async (musicId: string) => {
    if (!user) return;
    try {
      const musicToRemove = personalMusic.find(m => m.id === musicId);
      if (musicToRemove) {
        // FirebaseÏóêÏÑú ÏùåÏïÖ ÏÇ≠Ï†ú
        const musicQuery = query(
          collection(db, 'personalMusic'),
          where('userId', '==', user.uid),
          where('id', '==', musicId)
        );
        const musicSnapshot = await getDocs(musicQuery);
        
        if (!musicSnapshot.empty) {
          await deleteDoc(doc(db, 'personalMusic', musicSnapshot.docs[0].id));
        }
        
        // Î°úÏª¨ ÏÉÅÌÉúÏóêÏÑú Ï†úÍ±∞
        setPersonalMusic(prev => prev.filter(m => m.id !== musicId));
        alert('ÏùåÏïÖÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('ÏùåÏïÖ ÏÇ≠Ï†ú Ïò§Î•ò:', error);
      alert('ÏùåÏïÖ ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const getAIResponse = async (userMessage: string, conversationHistory: ChatMessage[]) => {      
    const conversationNum = conversationCount + 1;      
    setConversationCount(conversationNum);

    const musicRequestKeywords = ['ÏùåÏïÖ', 'ÎÖ∏Îûò', 'Îì£Í≥† Ïã∂Ïñ¥', 'Ï∂îÏ≤ú', 'ÌîåÎ†àÏù¥Î¶¨Ïä§Ìä∏', 'Î©úÎ°úÎîî', 'song', 'music', 'Ï∞æÏïÑÏ§ò', 'ÌãÄÏñ¥Ï§ò'];      
    const hasMusicRequest = musicRequestKeywords.some(keyword => userMessage.toLowerCase().includes(keyword));      
    const specificMusicPattern = /(.+)(ÎÖ∏Îûò|Í≥°|ÎÆ§ÎπÑ|MV|official)/i;      
    const specificMusicMatch = userMessage.match(specificMusicPattern);

    // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ†Ìò∏ÌïòÎäî Ïû•Î•¥ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    const userGenres = appSettings.musicPreferences || [];
    const genreNames = userGenres.map(genreId => {
      const genre = MUSIC_GENRES.find(g => g.id === genreId);
      return genre ? genre.name : genreId;
    }).join(', ');

    // Îã§Î•∏ Ïû•Î•¥ ÏöîÏ≤≠ Í∞êÏßÄ
    const otherGenreKeywords = ['Îã§Î•∏ Ïû•Î•¥', 'Îã§Î•∏ ÏùåÏïÖ', 'Îã§Î•∏ Ïä§ÌÉÄÏùº', 'Î≥ÑÏùò Ïû•Î•¥', 'Îã§Î•∏Í±∞', 'Î∞îÍøîÏ§ò', 'ÌÅ¥ÎûòÏãù', 'Ïû¨Ï¶à', 'ÌûôÌï©', 'Î°ù', 'Î∞úÎùºÎìú', 'Ìåù', 'Ïù∏Îîî', 'ÏùºÎ†âÌä∏Î°úÎãâ'];
    const wantsOtherGenre = otherGenreKeywords.some(keyword => userMessage.toLowerCase().includes(keyword));

    let systemPrompt = `ÎãπÏã†ÏùÄ ${AI_NAME}ÏûÖÎãàÎã§. ÏÇ¨Ïö©ÏûêÏùò Í∞êÏ†ïÏóê Í≥µÍ∞êÌïòÎäî Îî∞ÎúªÌïú AI ÏπúÍµ¨ÏûÖÎãàÎã§.

ÌòÑÏû¨ ÎåÄÌôî ÏÉÅÌô©:      
- ÎåÄÌôî ÌöüÏàò: ${conversationNum}Î≤àÏß∏      
- ÏÇ¨Ïö©Ïûê Í∞êÏ†ï ÏÉÅÌÉú: ${currentMood ? getMoodText(currentMood) : 'ÏÑ†ÌÉù ÏïàÌï®'}      
- ÏÇ¨Ïö©Ïûê Î†àÎ≤®: ${userProgress.level}      
- ÏùåÏïÖ Ï∂îÏ≤ú Ïó¨Î∂Ä: ${hasRecommendedMusic ? 'Ïù¥ÎØ∏ Ï∂îÏ≤úÌï®' : 'ÏïÑÏßÅ ÏïàÌï®'}
- ÏÇ¨Ïö©Ïûê ÏÑ†Ìò∏ Ïû•Î•¥: ${genreNames || 'ÏóÜÏùå'}

ÎåÄÌôî Í∑úÏπô:      
1. Ï≤´ Î≤àÏß∏ ÎåÄÌôî: ÏπúÍ∑ºÌïòÍ≤å Ïù∏ÏÇ¨ÌïòÍ≥† Ïò§Îäò ÌïòÎ£®Ïóê ÎåÄÌï¥ Î¨ªÍ∏∞      
2. Îëê Î≤àÏß∏ ÎåÄÌôî: ÏÇ¨Ïö©Ïûê Ïù¥ÏïºÍ∏∞Ïóê Í≥µÍ∞êÌïòÍ≥† Ï∂îÍ∞Ä ÏßàÎ¨∏ÌïòÍ∏∞      
3. ÏÑ∏ Î≤àÏß∏ ÎåÄÌôîÎ∂ÄÌÑ∞: ÏïÑÏßÅ ÏùåÏïÖ Ï∂îÏ≤úÏùÑ ÏïàÌñàÎã§Î©¥ ÏÇ¨Ïö©ÏûêÍ∞Ä Ï¢ãÏïÑÌïúÎã§Í≥† ÏÑ§Ï†ïÌïú "${genreNames}" Ïû•Î•¥Î•º Ïñ∏Í∏âÌïòÎ©∞ ÏûêÏó∞Ïä§ÎüΩÍ≤å ÏùåÏïÖ Ï∂îÏ≤ú Ï†úÏïàÌïòÍ∏∞
   Ïòà: "${genreNames}Î•º Ï¢ãÏïÑÌïúÎã§Í≥† ÌïòÏÖ®ÎäîÎç∞ Ï†úÍ∞Ä ÏùåÏïÖ Ï∂îÏ≤úÌï¥ÎìúÎ¶¥ÍπåÏöî? üéµ"      
4. ÏùåÏïÖ Ï∂îÏ≤ú ÌõÑ: ÏùåÏïÖ ÏñòÍ∏∞Îäî Í∑∏ÎßåÌïòÍ≥† ÏÇ¨Ïö©ÏûêÏôÄÏùò ÏùºÎ∞òÏ†ÅÏù∏ ÎåÄÌôîÏóê ÏßëÏ§ëÌïòÍ∏∞      
5. ÏÇ¨Ïö©ÏûêÍ∞Ä Íµ¨Ï≤¥Ï†ÅÏù∏ ÏùåÏïÖÏùÑ Ï∞æÏïÑÎã¨ÎùºÍ≥† ÌïòÎ©¥: "[MUSIC_SEARCH: Í≥°Î™Ö - ÏïÑÌã∞Ïä§Ìä∏]" ÌòïÌÉúÎ°ú ÎÅùÏóê Ï∂îÍ∞Ä
6. ÏÇ¨Ïö©ÏûêÍ∞Ä Îã§Î•∏ Ïû•Î•¥Î•º ÏõêÌïúÎã§Î©¥: Ïñ¥Îñ§ Ïû•Î•¥Î•º ÏõêÌïòÎäîÏßÄ Î¨ºÏñ¥Î≥¥Í≥† "[GENRE_SEARCH: Ïû•Î•¥Î™Ö]" ÌòïÌÉúÎ°ú Ï∂îÍ∞Ä

${hasRecommendedMusic ? 'Ïù¥ÎØ∏ ÏùåÏïÖÏùÑ Ï∂îÏ≤úÌñàÏúºÎØÄÎ°ú ÏùåÏïÖ ÏñòÍ∏∞Îäî ÌïòÏßÄ ÎßêÍ≥† ÏÇ¨Ïö©ÏûêÏùò Í∞êÏ†ïÍ≥º ÏùºÏÉÅÏóê ÏßëÏ§ëÌï¥ÏÑú ÎåÄÌôîÌïòÏÑ∏Ïöî.' : ''}

ÏùëÎãµ Ïä§ÌÉÄÏùº:      
- ÏπúÍ∑ºÌïòÍ≥† Í≥µÍ∞êÏ†ÅÏù∏ ÌÜ§ (Ï°¥ÎåìÎßê ÏÇ¨Ïö©)      
- Í∞ÑÍ≤∞ÌïòÍ≥† ÏûêÏó∞Ïä§Îü¨Ïö¥ ÏùëÎãµ (1-2Î¨∏Ïû•)      
- ÎãµÎ≥Ä ÏãúÏûëÏù¥ÎÇò Ï§ëÍ∞ÑÏóê Í∑ÄÏó¨Ïö¥ Ïù¥Î™®ÏßÄ ÌïòÎÇòÏî© Ï∂îÍ∞Ä

ÌòÑÏû¨ ÏÉÅÌô©: ${conversationNum <= 2 ? 'ÏïÑÏßÅ ÏùåÏïÖ Ï∂îÏ≤ú Îã®Í≥ÑÍ∞Ä ÏïÑÎãò. ÎåÄÌôîÎ•º Îçî ÎÇòÎàÑÍ∏∞' : hasRecommendedMusic ? 'ÏùåÏïÖ Ï∂îÏ≤úÏùÄ ÎÅùÎÇ¨ÏúºÎãà ÏùºÎ∞ò ÎåÄÌôî ÏßëÏ§ë' : 'ÏÇ¨Ïö©Ïûê ÏÑ†Ìò∏ Ïû•Î•¥Î•º Ïñ∏Í∏âÌïòÎ©∞ ÏùåÏïÖ Ï∂îÏ≤úÏùÑ ÏûêÏó∞Ïä§ÎüΩÍ≤å Ï†úÏïàÌï† Ïàò ÏûàÎäî Îã®Í≥Ñ'}`;

    if (specificMusicMatch && hasMusicRequest) {      
      systemPrompt += `\n\nÏÇ¨Ïö©ÏûêÍ∞Ä Íµ¨Ï≤¥Ï†ÅÏù∏ ÏùåÏïÖÏùÑ Ï∞æÏïÑÎã¨ÎùºÍ≥† ÏöîÏ≤≠ÌñàÏäµÎãàÎã§. "[MUSIC_SEARCH: ${specificMusicMatch[1].trim()}]" ÌòïÏãùÏúºÎ°ú Í≤ÄÏÉâÏñ¥Î•º Ìè¨Ìï®Ìï¥Ï£ºÏÑ∏Ïöî.`;      
    } else if (wantsOtherGenre) {
      systemPrompt += `\n\nÏÇ¨Ïö©ÏûêÍ∞Ä Îã§Î•∏ Ïû•Î•¥Ïùò ÏùåÏïÖÏùÑ ÏõêÌïúÎã§Í≥† Í∞êÏßÄÎêòÏóàÏäµÎãàÎã§. Ïñ¥Îñ§ Ïû•Î•¥Î•º ÏõêÌïòÎäîÏßÄ Î¨ºÏñ¥Î≥¥Í≥† "[GENRE_SEARCH: ÏöîÏ≤≠Ïû•Î•¥]" ÌòïÏãùÏúºÎ°ú Ìè¨Ìï®Ìï¥Ï£ºÏÑ∏Ïöî.`;
    } else if (hasMusicRequest && !hasRecommendedMusic) {      
      systemPrompt += `\n\nÏùåÏïÖ ÏöîÏ≤≠Ïù¥ Í∞êÏßÄÎêòÏóàÏäµÎãàÎã§. ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ§Ï†ïÌïú ÏÑ†Ìò∏ Ïû•Î•¥ "${genreNames}"ÏóêÏÑú ÌòÑÏû¨ Í∞êÏ†ïÏóê ÎßûÎäî Í≥°ÏùÑ Ï∂îÏ≤úÌïòÍ≥† "[MUSIC_SEARCH: ${genreNames} Ï∂îÏ≤úÍ≥°Î™Ö]" ÌòïÏãùÏúºÎ°ú Í≤ÄÏÉâÏñ¥Î•º Ìè¨Ìï®Ìï¥Ï£ºÏÑ∏Ïöî.`;      
    } else if (conversationNum >= 3 && !hasRecommendedMusic && !hasMusicRequest) {
      systemPrompt += `\n\nÏù¥Ï†ú ÏùåÏïÖ Ï∂îÏ≤úÏùÑ Ï†úÏïàÌï† ÎïåÏûÖÎãàÎã§. ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ†Ìò∏ÌïúÎã§Í≥† ÏÑ§Ï†ïÌïú "${genreNames}" Ïû•Î•¥Î•º Î∞òÎìúÏãú ÎåÄÌôîÏóêÏÑú Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú Ïñ∏Í∏âÌïòÎ©∞ ÏùåÏïÖ Ï∂îÏ≤úÏùÑ Ï†úÏïàÌïòÏÑ∏Ïöî. 
      Î∞òÎìúÏãú Ïù¥Îü∞ ÌòïÌÉúÎ°ú ÎßêÌïòÏÑ∏Ïöî: "${genreNames}Î•º Ï¢ãÏïÑÌïúÎã§Í≥† ÌïòÏÖ®ÎäîÎç∞ Ï†úÍ∞Ä ÏùåÏïÖ Ï∂îÏ≤úÌï¥ÎìúÎ¶¥ÍπåÏöî? üéµ" 
      Í∑∏Î¶¨Í≥† ÏùëÎãµ ÎÅùÏóê "[MUSIC_SEARCH: ${genreNames} Í∞êÏ†ïÎßûÏ∂§]" ÌòïÏãùÏúºÎ°ú Ìè¨Ìï®Ìï¥Ï£ºÏÑ∏Ïöî.
      Ïû•Î•¥ Ïù¥Î¶ÑÏùÑ Î∞òÎìúÏãú ÎåÄÌôî ÎÇ¥Ïö©Ïóê Ìè¨Ìï®ÏãúÌÇ§Îäî Í≤ÉÏù¥ Ï§ëÏöîÌï©ÎãàÎã§.`;
    }

    const messages = [...conversationHistory.slice(-5), { role: 'user', content: userMessage }];      
    const aiResponse = await callOpenAI(messages, systemPrompt);

    // ÏùåÏïÖ Í≤ÄÏÉâ Ìå®ÌÑ¥ Îß§Ïπ≠
    const musicSearchMatch = aiResponse.match(/\[MUSIC_SEARCH: ([^\]]+)\]/);      
    const genreSearchMatch = aiResponse.match(/\[GENRE_SEARCH: ([^\]]+)\]/);
    
    if (musicSearchMatch) {      
      const searchQuery = musicSearchMatch[1].trim();      
      const cleanResponse = aiResponse.replace(/\[MUSIC_SEARCH: [^\]]+\]/, '').trim();      
      const isUserRequest = !!(specificMusicMatch && hasMusicRequest);

      try {      
        let musicResults: MusicItem[] = [];
        
        // Ïû•Î•¥ Í∏∞Î∞ò Í≤ÄÏÉâÏù∏ÏßÄ ÌôïÏù∏
        const isGenreBased = userGenres.some(genreId => {
          const genre = MUSIC_GENRES.find(g => g.id === genreId);
          return genre && searchQuery.toLowerCase().includes(genre.name.toLowerCase());
        });

        if (isGenreBased || searchQuery.includes('Í∞êÏ†ïÎßûÏ∂§')) {
          // ÏÇ¨Ïö©Ïûê ÏÑ†Ìò∏ Ïû•Î•¥ + ÌòÑÏû¨ Í∞êÏ†ï Í∏∞Î∞ò Í≤ÄÏÉâ
          const genreQueries = userGenres.map(genreId => {
            const genre = MUSIC_GENRES.find(g => g.id === genreId);
            const moodKeyword = currentMood === 'good' ? 'upbeat happy' : 
                              currentMood === 'bad' ? 'sad emotional' : 'chill relaxing';
            return `${genre?.name || genreId} ${moodKeyword} popular`;
          });

          // Í∞Å Ïû•Î•¥Î≥ÑÎ°ú Í≤ÄÏÉâÌï¥ÏÑú ÏÑûÍ∏∞
          for (const query of genreQueries) {
            const results = await searchSpotifyMusic(query);
            musicResults.push(...results.slice(0, 1)); // Í∞Å Ïû•Î•¥ÏóêÏÑú 1Í≥°Ïî©
          }
          
          if (musicResults.length === 0) {
            musicResults = await searchMusic(searchQuery, false);
          }
        } else {
          // ÏùºÎ∞ò Í≤ÄÏÉâ
          musicResults = await searchMusic(searchQuery, isUserRequest);
        }
        
        if (musicResults.length > 0) {      
          setHasRecommendedMusic(true);      
          return { response: cleanResponse, music: musicResults[0] };      
        }      
      } catch (error) {      
        console.error('ÏùåÏïÖ Í≤ÄÏÉâ Ïò§Î•ò:', error);      
      }      
    } else if (genreSearchMatch) {
      const requestedGenre = genreSearchMatch[1].trim();
      const cleanResponse = aiResponse.replace(/\[GENRE_SEARCH: [^\]]+\]/, '').trim();
      
      try {
        // ÏöîÏ≤≠Îêú Ïû•Î•¥Î°ú SpotifyÏóêÏÑú Í≤ÄÏÉâ
        const moodKeyword = currentMood === 'good' ? 'upbeat happy energetic' : 
                          currentMood === 'bad' ? 'sad emotional ballad' : 'chill relaxing';
        const genreQuery = `${requestedGenre} ${moodKeyword} popular korean`;
        
        const musicResults = await searchSpotifyMusic(genreQuery);
        if (musicResults.length > 0) {
          setHasRecommendedMusic(true);
          return { response: cleanResponse, music: musicResults[0] };
        }
      } catch (error) {
        console.error('Ïû•Î•¥ Í∏∞Î∞ò ÏùåÏïÖ Í≤ÄÏÉâ Ïò§Î•ò:', error);
      }
    }
    
    return { response: aiResponse, music: null };      
  };

  const generateConversationSummary = async (messages: ChatMessage[]): Promise<SummaryData> => {      
    const userMessages = messages.filter(msg => msg.role === 'user').map(msg => msg.content).join('\n');

    if (!userMessages.trim()) {      
      // Í∏∞Î≥∏ ÏùåÏïÖ Ï∂îÏ≤ú  
      const defaultMusic = await searchMusic('healing relaxing music', false);  
      return {      
        summary: 'Ïò§ÎäòÎèÑ Í∞êÏ†ïÏùÑ ÎÇòÎàÑÎ©∞ Ïù¥ÏïºÍ∏∞Î•º Ìï¥Î¥§Ïñ¥Ïöî. ÎåÄÌôîÎ•º ÌÜµÌï¥ ÎßàÏùåÏùÑ Ï†ïÎ¶¨Ìï† Ïàò ÏûàÏóàÏñ¥Ïöî. Ïù¥Îü∞ ÏãúÍ∞ÑÎì§Ïù¥ ÏÜåÏ§ëÌïòÎã§Í≥† ÏÉùÍ∞ÅÌï¥Ïöî. ÏïûÏúºÎ°úÎèÑ Ïù¥Î†áÍ≤å ÎåÄÌôîÌïòÎ©∞ ÏÑúÎ°úÏùò ÎßàÏùåÏùÑ ÎÇòÎàÑÎ©¥ Ï¢ãÍ≤†Ïñ¥Ïöî.',      
        keywords: ['#Í∞êÏ†ïÎÇòÎàî'],      
        recommendedEmotions: ['ÌèâÏò®', 'ÎßåÏ°±', 'Ìé∏Ïïà'],      
        actionItems: ['Ïò§ÎäòÏùò Í∞êÏ†ïÏùÑ ÏùºÍ∏∞Ïû•Ïóê Í∏∞Î°ùÌïòÏó¨ Ìå®ÌÑ¥ ÌååÏïÖÌïòÍ∏∞', 'Ïû†Îì§Í∏∞ Ï†Ñ 10Î∂ÑÍ∞Ñ Î™ÖÏÉÅÏù¥ÎÇò ÍπäÏùÄ Ìò∏Ìù°ÌïòÍ∏∞'],  
        recommendedMusic: defaultMusic.slice(0, 2)  
      };      
    }

    const systemPrompt = `Îã§Ïùå ÎåÄÌôî ÎÇ¥Ïö©ÏùÑ Î∂ÑÏÑùÌï¥ÏÑú Í∞êÏ†ï ÏùºÍ∏∞ Í¥ÄÏ†êÏóêÏÑú ÏùëÎãµÌï¥Ï£ºÏÑ∏Ïöî:

ÎåÄÌôî ÎÇ¥Ïö©:      
${userMessages}

ÌòÑÏû¨ Í∞êÏ†ï ÏÉÅÌÉú: ${currentMood ? getMoodText(currentMood) : 'ÏÑ†ÌÉù ÏïàÌï®'}

Î∂ÑÏÑù ÏöîÏ≤≠:      
1. ÎåÄÌôî ÎÇ¥Ïö©ÏùÑ Î∞îÌÉïÏúºÎ°ú Ïò§Îäò ÏûàÏóàÎçò ÏùºÏùÑ 2-4Ï§ÑÎ°ú ÏöîÏïΩ (Ìï¥ÏöîÏ≤¥Î°ú ÏûëÏÑ±, ÎåÄÌôîÏóêÏÑú ÎÇòÏò® ÎÇ¥Ïö©Îßå ÏÇ¨Ïö©, Í∞ÄÍ≥µÌïòÏßÄ Îßê Í≤É)      
2. ÎåÄÌôîÏóêÏÑú ÎäêÍª¥ÏßÑ Í∞êÏ†ï ÌÇ§ÏõåÎìú 5Í∞ú Ï∂îÏ∂ú (Ïòà: #Ïä§Ìä∏Î†àÏä§, #ÌñâÎ≥µ, #ÌîºÍ≥§Ìï® Îì±)      
3. AIÍ∞Ä ÎåÄÌôîÏóêÏÑú Î∂ÑÏÑùÌïú ÏÑ∏Î∂Ä Í∞êÏ†ï 5Í∞ú Ï∂îÏ≤ú (Ïòà: ÌñâÎ≥µ, Í±±Ï†ï, ÏÑ§Î†ò, ÌîºÍ≥§, ÎßåÏ°± Îì±)      
4. ÏÇ¨Ïö©ÏûêÏùò ÎåÄÌôî ÎÇ¥Ïö©Í≥º Í∞êÏ†ï ÏÉÅÌÉúÎ•º Î∞îÌÉïÏúºÎ°ú Ïã§Ï†úÎ°ú ÎèÑÏõÄÏù¥ Îê† ÎßåÌïú Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† Ïã§Ìñâ Í∞ÄÎä•Ìïú Ïï°ÏÖò ÏïÑÏù¥ÌÖú 2Í∞ú Ï†úÏïà (Ïòà: "30Î∂Ñ ÏÇ∞Ï±ÖÌïòÎ©∞ Ïò§Îäò ÏûàÏóàÎçò Ï¢ãÏùÄ Ïùº 3Í∞ÄÏßÄ Îñ†Ïò¨Î¶¨Í∏∞", "Ï∑®Ïπ® Ï†Ñ Îî∞ÎúªÌïú Ï∞® ÎßàÏãúÎ©∞ ÎÇ¥Ïùº Ìï† Ïùº 3Í∞ÄÏßÄ Ï†ÅÏñ¥Î≥¥Í∏∞")  
5. ÏÇ¨Ïö©ÏûêÏùò Í∞êÏ†ïÍ≥º ÎåÄÌôî ÎÇ¥Ïö©Ïóê Í∞ÄÏû• Ï†ÅÌï©Ìïú ÏùåÏïÖ Í≤ÄÏÉâ ÌÇ§ÏõåÎìú 2Í∞ú Ï†úÏïà (Í∞ÅÍ∞Å Îã§Î•∏ Ïä§ÌÉÄÏùºÎ°ú)

ÏùëÎãµ ÌòïÏãù:      
ÏöîÏïΩ: [2-4Ï§Ñ ÏöîÏïΩ - Í∞Å Ï§ÑÏùÄ ÎåÄÌôîÏóêÏÑú ÎÇòÏò® Íµ¨Ï≤¥Ï†ÅÏù∏ ÎÇ¥Ïö©, Ìï¥ÏöîÏ≤¥]      
Í∞êÏ†ïÌÇ§ÏõåÎìú: #ÌÇ§ÏõåÎìú1, #ÌÇ§ÏõåÎìú2, #ÌÇ§ÏõåÎìú3, #ÌÇ§ÏõåÎìú4, #ÌÇ§ÏõåÎìú5      
Ï∂îÏ≤úÍ∞êÏ†ï: Í∞êÏ†ï1, Í∞êÏ†ï2, Í∞êÏ†ï3, Í∞êÏ†ï4, Í∞êÏ†ï5      
Ïï°ÏÖòÏïÑÏù¥ÌÖú: ÏïÑÏù¥ÌÖú1 | ÏïÑÏù¥ÌÖú2  
ÏùåÏïÖÌÇ§ÏõåÎìú: ÌÇ§ÏõåÎìú1 | ÌÇ§ÏõåÎìú2`;

    try {      
      const result = await callOpenAI([], systemPrompt);      
      const lines = result.split('\n');      
      let summary = '', keywords: string[] = [], recommendedEmotions: string[] = [], actionItems: string[] = [], musicKeywords: string[] = [];      
      lines.forEach((line: string) => {      
        if (line.startsWith('ÏöîÏïΩ:')) summary = line.replace('ÏöîÏïΩ:', '').trim();      
        else if (line.startsWith('Í∞êÏ†ïÌÇ§ÏõåÎìú:')) keywords = line.replace('Í∞êÏ†ïÌÇ§ÏõåÎìú:', '').trim().split(',').map((k: string) => k.trim()).filter(Boolean);      
        else if (line.startsWith('Ï∂îÏ≤úÍ∞êÏ†ï:')) recommendedEmotions = line.replace('Ï∂îÏ≤úÍ∞êÏ†ï:', '').trim().split(',').map((e: string) => e.trim()).filter(Boolean);      
        else if (line.startsWith('Ïï°ÏÖòÏïÑÏù¥ÌÖú:')) actionItems = line.replace('Ïï°ÏÖòÏïÑÏù¥ÌÖú:', '').trim().split('|').map((a: string) => a.trim()).filter(Boolean);      
        else if (line.startsWith('ÏùåÏïÖÌÇ§ÏõåÎìú:')) musicKeywords = line.replace('ÏùåÏïÖÌÇ§ÏõåÎìú:', '').trim().split('|').map((k: string) => k.trim()).filter(Boolean);      
      });    

      // ÏùåÏïÖ Ï∂îÏ≤ú ÏÉùÏÑ±  
      let recommendedMusic: MusicItem[] = [];  
      if (musicKeywords.length > 0) {  
        try {  
          const music1 = await searchMusic(musicKeywords[0] || 'healing music', false);  
          const music2 = await searchMusic(musicKeywords[1] || 'uplifting music', false);  
          recommendedMusic = [...music1.slice(0, 1), ...music2.slice(0, 1)];  
        } catch (error) {  
          console.error('ÏùåÏïÖ Í≤ÄÏÉâ Ïò§Î•ò:', error);  
          const defaultMusic = await searchMusic('calm relaxing music', false);  
          recommendedMusic = defaultMusic.slice(0, 2);  
        }  
      } else {  
        const defaultMusic = await searchMusic('calm peaceful music', false);  
        recommendedMusic = defaultMusic.slice(0, 2);  
      }

      return {      
        summary: summary || 'Ïò§ÎäòÏùò Í∞êÏ†ïÍ≥º ÏÉÅÌô©ÏùÑ ÎÇòÎàÑÏóàÏñ¥Ïöî. ÎåÄÌôîÎ•º ÌÜµÌï¥ ÎßàÏùåÏùÑ Ï†ïÎ¶¨Ìï† Ïàò ÏûàÏóàÏñ¥Ïöî.',      
        keywords: keywords.slice(0, 5),      
        recommendedEmotions: recommendedEmotions.slice(0, 5),      
        actionItems: actionItems.slice(0, 2).length > 0 ? actionItems.slice(0, 2) : ['Ïò§Îäò ÎäêÎÇÄ Í∞êÏ†ïÏùÑ ÏùºÍ∏∞Ïóê ÏûêÏÑ∏Ìûà Í∏∞Î°ùÌï¥Î≥¥Í∏∞', 'ÎÇ¥Ïùº ÌïòÍ≥† Ïã∂ÏùÄ Ïùº ÌïòÎÇòÎ•º Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú Í≥ÑÌöçÌïòÍ∏∞'],  
        recommendedMusic: recommendedMusic  
      };      
    } catch (error) {      
      console.error('ÎåÄÌôî ÏöîÏïΩ ÏÉùÏÑ± Ïò§Î•ò:', error);  
      // ÏóêÎü¨ Ïãú Í∏∞Î≥∏ ÏùåÏïÖ Ï∂îÏ≤ú  
      const defaultMusic = await searchMusic('healing peaceful music', false);  
      return {      
        summary: 'ÎåÄÌôî ÏöîÏïΩÏùÑ ÏÉùÏÑ±ÌïòÎäî Ï§ëÏóê Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöî. Í∑∏ÎûòÎèÑ Ïò§Îäò Ïù¥ÏïºÍ∏∞Î•º ÎÇòÎàå Ïàò ÏûàÏñ¥ÏÑú Ï¢ãÏïòÏñ¥Ïöî.',      
        keywords: ['#Í∞êÏ†ïÎÇòÎàî'],      
        recommendedEmotions: ['ÌèâÏò®', 'ÎßåÏ°±'],      
        actionItems: ['Ïò§ÎäòÏùò ÎåÄÌôî ÎÇ¥Ïö©ÏùÑ Îã§Ïãú ÌïúÎ≤à ÎêòÏÉàÍ≤®Î≥¥Î©∞ Í∏çÏ†ïÏ†ÅÏù∏ Î∂ÄÎ∂Ñ Ï∞æÍ∏∞', 'Îî∞ÎúªÌïú Ï∞®ÎÇò ÏùåÎ£åÎ•º ÎßàÏãúÎ©∞ ÎßàÏùåÏùò Ïó¨Ïú† Í∞ñÍ∏∞'],  
        recommendedMusic: defaultMusic.slice(0, 2)  
      };      
    }      
  };

  const generateEmotionBasedMusic = async (emotions: string[], mood: string) => {      
    try {      
      const emotionQuery = emotions.join(' ');      
      const moodText = getMoodText(mood);      
      const searchQuery = `${emotionQuery} ${moodText} ÏùåÏïÖ`;      
            
      const musicResults = await searchMusic(searchQuery, false);      
      if (musicResults.length > 0) {      
        setRecommendedMusicForSummary(musicResults.slice(0, 2));      
      }      
    } catch (error) {      
      console.error('Í∞êÏ†ï Í∏∞Î∞ò ÏùåÏïÖ Ï∂îÏ≤ú Ïò§Î•ò:', error);      
    }      
  };

  const handleMoodSelect = (mood: 'good' | 'normal' | 'bad') => {      
    setCurrentMood(mood);      
    handleStepChange('chat');      
    setConversationCount(0);      
    setHasRecommendedMusic(false);      
    setRecommendedMusicForSummary([]);      
    const initialMessage: ChatMessage = {      
      role: 'assistant',      
      content: `ÏïàÎÖïÌïòÏÑ∏Ïöî! üéµ Ïò§ÎäòÏùÄ ${getMoodText(mood)} Í∏∞Î∂ÑÏù¥ÏãúÍµ∞Ïöî. Ïò§Îäò ÌïòÎ£® Ïñ¥ÎñªÍ≤å Î≥¥ÎÇ¥ÏÖ®ÎäîÏßÄ Ìé∏ÌïòÍ≤å ÎßêÏîÄÌï¥Ï£ºÏÑ∏Ïöî. ‚ú®`,      
      timestamp: new Date()      
    };      
    setChatMessages([initialMessage]);      
  };

  const handleSendMessage = async () => {      
    if (!currentInput.trim() || !currentMood) return;      
    const userMessage: ChatMessage = { role: 'user', content: currentInput, timestamp: new Date() };      
    setIsLoading(true);      
    setChatMessages(prev => [...prev, userMessage]);      
    setCurrentInput("");

    try {      
      const aiResult = await getAIResponse(currentInput, chatMessages);      
      const aiMessage: ChatMessage = {      
        role: 'assistant',      
        content: aiResult.response,      
        timestamp: new Date(),      
        musicRecommendation: aiResult.music,      
        hasMusic: !!aiResult.music      
      };      
      setChatMessages(prev => [...prev, aiMessage]);      
      if (aiResult.music) {      
        addToPersonalMusic(aiResult.music);      
      }      
    } catch (error) {      
      console.error('AI ÏùëÎãµ Ïò§Î•ò:', error);      
      const errorMessage: ChatMessage = {      
        role: 'assistant',      
        content: 'Ï£ÑÏÜ°Ìï¥Ïöî. üíú ÏùºÏãúÏ†ÅÏúºÎ°ú Î¨∏Ï†úÍ∞Ä ÏÉùÍ≤ºÏñ¥Ïöî. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',      
        timestamp: new Date()      
      };      
      setChatMessages(prev => [...prev, errorMessage]);      
    } finally {      
      setIsLoading(false);      
    }      
  };

  const addChatMusicToMyList = (music: MusicItem) => {      
    addToPersonalMusic(music);      
    alert(`"${music.title}" ÏùåÏïÖÏù¥ ÎÇ¥ ÏùåÏïÖ Î¶¨Ïä§Ìä∏Ïóê Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§! 'ÎÇ¥ ÏùåÏïÖ'ÏóêÏÑú ÌôïÏù∏Ìï† Ïàò ÏûàÏñ¥Ïöî.`);      
  };

  const handleGenerateSummary = async () => {      
    if (!currentMood || chatMessages.length === 0) return;      
    setIsLoading(true);      
    try {      
      const summary = await generateConversationSummary(chatMessages);      
      setSummaryData(summary);      
      setSelectedEmotions([]);      
            
      await generateEmotionBasedMusic(summary.recommendedEmotions, currentMood);      
            
      handleStepChange('summary');      
    } catch (error) {      
      console.error('ÏöîÏïΩ ÏÉùÏÑ± Ïò§Î•ò:', error);      
      alert('ÏöîÏïΩ ÏÉùÏÑ± Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');      
    } finally {      
      setIsLoading(false);      
    }      
  };

  const handleSaveDiary = async () => {      
    if (!currentMood || !summaryData || !user) {      
      alert('Ï†ÄÏû•Ïóê ÌïÑÏöîÌïú Ï†ïÎ≥¥Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§.');      
      return;      
    }      
    setIsLoading(true);      
    try {      
      const now = new Date();      
      const allEmotions: string[] = [];

      if (userMainEmotion.trim()) {      
        allEmotions.push(userMainEmotion.trim());      
      }      
      allEmotions.push(...selectedEmotions);

      const chatMusic = chatMessages      
        .filter(msg => msg.musicRecommendation)      
        .map(msg => msg.musicRecommendation!)      
        .filter(music => music);

      // ÏöîÏïΩÏóêÏÑú Ï∂îÏ≤úÎêú ÏùåÏïÖÎèÑ Ìè¨Ìï®
      const summaryMusic = summaryData.recommendedMusic || [];
      const allMusic = [...chatMusic, ...summaryMusic];

      const newEntry = {      
        userId: user.uid,      
        date: formatDate(now),      
        time: formatTime(now),      
        mood: currentMood,      
        summary: summaryData.summary || "ÎÇ¥Ïö© ÏóÜÏùå",      
        keywords: summaryData.keywords || [],      
        selectedEmotions: allEmotions,      
        musicPlayed: allMusic, // Ï±ÑÌåÖ + ÏöîÏïΩ ÏùåÏïÖ Î™®Îëê Ìè¨Ìï®     
        chatMessages: chatMessages,      
        experienceGained: LEVEL_SYSTEM.experienceGain.diaryWrite,      
        actionItems: summaryData.actionItems || [],      
        deletedAt: null,      
        createdAt: serverTimestamp()      
      };

      const docRef = await addDoc(collection(db, 'diaries'), newEntry);

      const savedEntry: DiaryEntry = { ...newEntry, id: docRef.id, createdAt: now };      
      setDiaryEntries(prev => [savedEntry, ...prev]);

      updateExperience(LEVEL_SYSTEM.experienceGain.diaryWrite);

      setChatMessages([]);      
      setCurrentMood(null);      
      setSummaryData(null);      
      setSelectedEmotions([]);      
      setUserMainEmotion('');      
      setConversationCount(0);      
      setHasRecommendedMusic(false);      
      setRecommendedMusicForSummary([]);      
      handleStepChange('mood');

      alert('ÏùºÍ∏∞Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§! +20 EXP');      
    } catch (error) {      
      console.error('ÏùºÍ∏∞ Ï†ÄÏû• Ïò§Î•ò:', error);      
      alert('ÏùºÍ∏∞ Ï†ÄÏû•Ïóê Î¨∏Ï†úÍ∞Ä ÏÉùÍ≤ºÏñ¥Ïöî. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');      
    } finally {      
      setIsLoading(false);      
    }      
  };

  const handleEmotionSelect = (emotion: string) => {      
    setSelectedEmotions(prev => {      
      if (prev.includes(emotion)) {      
        return prev.filter(e => e !== emotion);      
      } else if (prev.length < 2) {      
        return [...prev, emotion];      
      } else {      
        return [prev[1], emotion];      
      }      
    });      
  };

  // Ïò®Î≥¥Îî© Ìï∏Îì§Îü¨    
  const handlePersonTypeSelect = (type: string) => {    
    setSelectedPersonType(type);    
  };

  const handleMusicGenreSelect = (genreId: string) => {    
    setSelectedMusicGenres(prev => {    
      if (prev.includes(genreId)) {    
        return prev.filter(id => id !== genreId);    
      } else if (prev.length < 3) {    
        return [...prev, genreId];    
      } else {    
        return [prev[1], prev[2], genreId];    
      }    
    });    
  };

  const handleOnboardingComplete = async () => {    
    if (selectedMusicGenres.length === 0) {    
      alert('ÏµúÏÜå 1Í∞ú Ïù¥ÏÉÅÏùò ÏùåÏïÖ Ï∑®Ìñ•ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');    
      return;    
    }

    if (!user) return;

    try {    
      // ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏    
      const settingsQuery = query(    
        collection(db, 'appSettings'),    
        where('userId', '==', user.uid)    
      );    
      const settingsSnapshot = await getDocs(settingsQuery);    
          
      const updatedSettings = {    
        ...appSettings,    
        musicPreferences: selectedMusicGenres    
      };

      if (!settingsSnapshot.empty) {    
        await updateDoc(doc(db, 'appSettings', settingsSnapshot.docs[0].id), updatedSettings);    
      } else {    
        await addDoc(collection(db, 'appSettings'), {    
          userId: user.uid,    
          ...updatedSettings,    
          createdAt: serverTimestamp()    
        });    
      }

      setAppSettings(updatedSettings);    
      setCurrentStep('mood');    
    } catch (error) {    
      console.error('Ïò®Î≥¥Îî© ÏôÑÎ£å Ïò§Î•ò:', error);    
      alert('ÏÑ§Ï†ï Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');    
    }    
  };

  const getCurrentTheme = () => APP_THEME;

  const renderTokenBar = () => {      
    const usageRatio = Math.min(tokenUsage / MAX_FREE_TOKENS, 1.0);      
    const remaining = Math.max(0, MAX_FREE_TOKENS - tokenUsage);      
    let status = usageRatio >= 0.95 ? 'Ï°∞Í∏à Î∂ÄÏ°±Ìï¥Ïöî' : usageRatio >= 0.5 ? 'Ï†ÅÎãπÌï¥Ïöî' : 'Ï∂©Î∂ÑÌï¥Ïöî';

    return (      
      <div className={`bg-gradient-to-r ${getCurrentTheme().secondary} rounded-lg p-4 mb-4 border border-${getCurrentTheme().accent.split('-')[0]}-200`}>      
        <div className="flex justify-between items-center mb-2">      
          <span className={`text-sm font-semibold text-${getCurrentTheme().accent.split('-')[0]}-800`}>AIÏôÄ ÎåÄÌôîÌï† Ïàò ÏûàÎäî ÏóêÎÑàÏßÄ</span>      
          <span className={`text-xs text-${getCurrentTheme().accent.split('-')[0]}-600`}>{remaining.toLocaleString()} / {MAX_FREE_TOKENS.toLocaleString()} ÎÇ®Ïùå</span>      
        </div>      
        <div className={`w-full bg-${getCurrentTheme().accent.split('-')[0]}-100 rounded-full h-2`}>      
          <div className={`h-2 rounded-full transition-all bg-gradient-to-r ${getCurrentTheme().primary}`} style={{ width: `${usageRatio * 100}%` }}></div>      
        </div>      
        <div className={`text-center text-xs mt-1 text-${getCurrentTheme().accent.split('-')[0]}-600`}>ÏÉÅÌÉú: {status}</div>      
      </div>      
    );      
  };

  const renderUserProgress = () => (      
    <div className={`bg-gradient-to-r ${getCurrentTheme().secondary} rounded-xl shadow-lg p-6 mb-6 border border-${getCurrentTheme().accent.split('-')[0]}-200`}>      
      <div className="flex justify-between items-center mb-4">      
        <span className={`text-lg font-bold text-${getCurrentTheme().accent.split('-')[0]}-800`}>Î†àÎ≤® {userProgress.level}</span>      
        <span className={`text-sm text-${getCurrentTheme().accent.split('-')[0]}-600`}>Îã§Ïùå Î†àÎ≤®ÍπåÏßÄ {userProgress.expToNext} EXP</span>      
      </div>      
      <div className={`w-full bg-${getCurrentTheme().accent.split('-')[0]}-100 rounded-full h-3`}>      
        <div className={`bg-gradient-to-r ${getCurrentTheme().primary} h-3 rounded-full transition-all`} style={{ width: `${userProgress.progressPercentage}%` }}></div>      
      </div>      
      <div className={`text-center text-xs text-${getCurrentTheme().accent.split('-')[0]}-600 mt-2`}>Ï¥ù Í≤ΩÌóòÏπò: {userProgress.experience} EXP</div>      
    </div>      
  );

  const renderAuth = () => (      
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} flex items-center justify-center p-4`}>      
      <div className="bg-white rounded-2xl shadow-xl p-8 w-full max-w-md">      
        <div className="text-center mb-6">      
          <div className="text-4xl mb-2">üéµ</div>      
          <h1 className={`text-2xl font-bold text-${getCurrentTheme().accent.split('-')[0]}-800`}>EPLAY</h1>      
          <p className={`text-${getCurrentTheme().accent.split('-')[0]}-600`}>Í∞êÏ†ïÍ∏∞Î∞ò ÏùåÏïÖ Ï∂îÏ≤ú</p>      
        </div>      
        <div className="flex justify-center mb-6">      
          <div className="flex bg-gray-100 rounded-lg p-1">      
            <button onClick={() => setIsAuthMode('login')} className={`px-4 py-2 rounded-md font-medium transition-all ${isAuthMode === 'login' ? `bg-gradient-to-r ${getCurrentTheme().primary} text-white` : 'text-gray-600'}`}>Î°úÍ∑∏Ïù∏</button>      
            <button onClick={() => setIsAuthMode('register')} className={`px-4 py-2 rounded-md font-medium transition-all ${isAuthMode === 'register' ? `bg-gradient-to-r ${getCurrentTheme().primary} text-white` : 'text-gray-600'}`}>ÌöåÏõêÍ∞ÄÏûÖ</button>      
          </div>      
        </div>      
        <div className="space-y-4">      
          <input type="email" placeholder="Ïù¥Î©îÏùºÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî" value={email} onChange={(e) => setEmail(e.target.value)} className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-${getCurrentTheme().accent}`}/>      
          <input type="password" placeholder="ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî" value={password} onChange={(e) => setPassword(e.target.value)} onKeyPress={(e) => { if (e.key === 'Enter') { isAuthMode === 'login' ? handleLogin() : handleRegister(); } }} className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-${getCurrentTheme().accent}`}/>      
          <button onClick={isAuthMode === 'login' ? handleLogin : handleRegister} disabled={isLoading} className={`w-full bg-gradient-to-r ${getCurrentTheme().primary} text-white py-3 rounded-lg font-semibold hover:opacity-90 transition-all disabled:opacity-50`}>      
            {isLoading ? 'Ï≤òÎ¶¨ Ï§ë...' : (isAuthMode === 'login' ? 'Î°úÍ∑∏Ïù∏' : 'ÌöåÏõêÍ∞ÄÏûÖ')}      
          </button>      
        </div>      
        <div className="text-center my-4 text-gray-500">ÎòêÎäî</div>      
        <button onClick={handleGoogleLogin} disabled={isLoading} className="w-full bg-white border border-gray-300 py-3 rounded-lg font-medium hover:bg-gray-50 transition-all disabled:opacity-50 flex items-center justify-center space-x-2">      
          <span>üóù</span>      
          <span>GoogleÎ°ú Î°úÍ∑∏Ïù∏</span>      
        </button>      
      </div>      
    </div>      
  );

  const renderOnboardName = () => (    
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} flex items-center justify-center p-4`}>    
      <div className="bg-white rounded-2xl shadow-xl p-8 w-full max-w-md">    
        <div className="text-center mb-8">    
          <h2 className="text-2xl font-bold text-gray-800 mb-2">ÎàÑÍµ¨ÏóêÍ≤å ÌïòÎ£®Î•º ÌÑ∏Ïñ¥ÎÜìÍ≥† Ïã∂ÎÇòÏöî?</h2>    
        </div>    
            
        <div className="space-y-6 mb-8">    
          <button   
            onClick={() => handlePersonTypeSelect('idol')}  
            className={`w-full py-4 px-6 rounded-lg font-semibold transition-all ${  
              selectedPersonType === 'idol'   
                ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white'   
                : 'bg-gradient-to-r from-purple-100 to-pink-100 text-purple-700 hover:from-purple-200 hover:to-pink-200'  
            }`}  
          >    
            Ï¢ãÏïÑÌïòÎäî ÏïÑÏù¥Îèå    
          </button>    
          <button   
            onClick={() => handlePersonTypeSelect('crush')}  
            className={`w-full py-4 px-6 rounded-lg font-semibold transition-all ${  
              selectedPersonType === 'crush'   
                ? 'bg-gradient-to-r from-purple-400 to-pink-400 text-white'   
                : 'bg-gradient-to-r from-purple-50 to-pink-50 text-purple-600 hover:from-purple-100 hover:to-pink-100'  
            }`}  
          >    
            ÏßùÏÇ¨Îûë ÏÉÅÎåÄ    
          </button>    
          <button   
            onClick={() => handlePersonTypeSelect('past-self')}  
            className={`w-full py-4 px-6 rounded-lg font-semibold transition-all ${  
              selectedPersonType === 'past-self'   
                ? 'bg-gradient-to-r from-purple-300 to-pink-300 text-white'   
                : 'bg-gradient-to-r from-purple-25 to-pink-25 text-purple-500 hover:from-purple-75 hover:to-pink-75'  
            }`}  
          >    
            Ïñ¥Ï†úÏùò ÎÇò    
          </button>    
        </div>

        {selectedPersonType && (  
          <button   
            onClick={() => setCurrentStep('onboard-music')}   
            className="w-full py-3 px-6 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg font-semibold hover:from-purple-700 hover:to-pink-700 transition-all"  
          >    
            Îã§Ïùå    
          </button>    
        )}  
      </div>    
    </div>    
  );

  const renderOnboardMusic = () => (    
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} flex items-center justify-center p-4`}>    
      <div className="bg-white rounded-2xl shadow-xl p-8 w-full max-w-md">    
        <div className="text-center mb-8">    
          <h2 className="text-2xl font-bold text-gray-800 mb-2">Ï¢ãÏïÑÌïòÎäî ÏùåÏïÖ Ïû•Î•¥Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî</h2>    
          <p className="text-gray-600">ÏµúÎåÄ 3Í∞úÍπåÏßÄ ÏÑ†ÌÉù Í∞ÄÎä•</p>    
        </div>    
            
        <div className="grid grid-cols-2 gap-3 mb-8">    
          {MUSIC_GENRES.map((genre) => (  
            <button  
              key={genre.id}  
              onClick={() => handleMusicGenreSelect(genre.id)}  
              className={`p-3 rounded-lg text-center transition-all border-2 ${  
                selectedMusicGenres.includes(genre.id)  
                  ? 'bg-purple-500 text-white border-purple-500'  
                  : 'bg-gray-100 text-gray-700 border-gray-200 hover:border-purple-300'  
              }`}  
            >  
              <div className="text-lg mb-1">{genre.emoji}</div>  
              <div className="text-sm font-medium">{genre.name}</div>  
            </button>  
          ))}  
        </div>

        <div className="text-center mb-4">  
          <p className="text-sm text-gray-500">ÏÑ†ÌÉùÎêú Ïû•Î•¥: {selectedMusicGenres.length}/3</p>  
        </div>

        {selectedMusicGenres.length > 0 && (  
          <button   
            onClick={handleOnboardingComplete}   
            className="w-full py-3 px-6 bg-purple-600 text-white rounded-lg font-semibold hover:bg-purple-700 transition-all"  
          >    
            ÏôÑÎ£å    
          </button>    
        )}  
      </div>    
    </div>    
  );

  const renderMoodSelection = () => (      
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>      
      <div className="max-w-4xl mx-auto">      
        {renderTokenBar()}      
        <div className="text-center mb-8">      
          <h2 className="text-3xl font-bold text-gray-800 mb-2">Ïò§Îäò Í∏∞Î∂ÑÏùÄ Ïñ¥Îñ†ÏÑ∏Ïöî?</h2>      
          <p className="text-gray-600">{AI_NAME}Í∞Ä Ïó¨Îü¨Î∂ÑÏùò Í∞êÏ†ïÏóê ÎßûÎäî ÏùåÏïÖÏùÑ Ï∞æÏïÑÎìúÎ¶¥Í≤åÏöî</p>      
        </div>      
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-8">      
          <div className="flex flex-col items-center">      
            <button onClick={() => handleMoodSelect('good')} className="mb-4 transform hover:scale-110 transition-all duration-300 hover:drop-shadow-lg">      
              <div className="w-24 h-24 rounded-3xl bg-orange-400 flex items-center justify-center shadow-lg"><div className="text-4xl">üòä</div></div>      
            </button>      
            <span className="text-lg font-semibold text-gray-700">Ï¢ãÏïÑ!</span>      
          </div>      
          <div className="flex flex-col items-center">      
            <button onClick={() => handleMoodSelect('normal')} className="mb-4 transform hover:scale-110 transition-all duration-300 hover:drop-shadow-lg">      
              <div className="w-24 h-24 rounded-full bg-blue-300 flex items-center justify-center shadow-lg"><div className="text-4xl">üòê</div></div>      
            </button>      
            <span className="text-lg font-semibold text-gray-700">Í∑∏ÎÉ• Î≠ê..</span>      
          </div>      
          <div className="flex flex-col items-center">      
            <button onClick={() => handleMoodSelect('bad')} className="mb-4 transform hover:scale-110 transition-all duration-300 hover:drop-shadow-lg">      
              <div className="w-24 h-24 rounded-full bg-purple-300 flex items-center justify-center shadow-lg"><div className="text-4xl">üòî</div></div>      
            </button>      
            <span className="text-lg font-semibold text-gray-700">Î≥ÑÎ£®Ïïº..</span>      
          </div>      
        </div>      
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8">      
          <button onClick={() => handleStepChange('myDiary')} className="bg-white rounded-lg shadow-md p-4 flex flex-col items-center hover:shadow-lg transition-shadow">      
            <span className="text-2xl mb-2">üìñ</span><span className="text-sm font-medium text-gray-700">ÎÇ¥ ÏùºÍ∏∞Ïû•</span><span className="text-xs text-gray-500">({diaryEntries.length})</span>      
          </button>      
          <button onClick={() => handleStepChange('myMusic')} className="bg-white rounded-lg shadow-md p-4 flex flex-col items-center hover:shadow-lg transition-shadow">      
            <span className="text-2xl mb-2">üéµ</span><span className="text-sm font-medium text-gray-700">ÎÇ¥ ÏùåÏïÖ</span><span className="text-xs text-gray-500">({personalMusic.length})</span>      
          </button>      
          <button onClick={() => handleStepChange('search')} className="bg-white rounded-lg shadow-md p-4 flex flex-col items-center hover:shadow-lg transition-shadow">      
            <span className="text-2xl mb-2">üîç</span><span className="text-sm font-medium text-gray-700">Í≤ÄÏÉâ</span><span className="text-xs text-gray-500">Í∏∞Î°ù Ï∞æÍ∏∞</span>      
          </button>      
          <button onClick={() => handleStepChange('stats')} className="bg-white rounded-lg shadow-md p-4 flex flex-col items-center hover:shadow-lg transition-shadow">      
            <span className="text-2xl mb-2">üìä</span><span className="text-sm font-medium text-gray-700">ÌÜµÍ≥Ñ Î∞è Îã¨Î†•</span><span className="text-xs text-gray-500">Í∞êÏ†ï Î∂ÑÏÑù</span>      
          </button>      
          <button onClick={() => handleStepChange('trash')} className="bg-white rounded-lg shadow-md p-4 flex flex-col items-center hover:shadow-lg transition-shadow">      
            <span className="text-2xl mb-2">üóëÔ∏è</span><span className="text-sm font-medium text-gray-700">Ìú¥ÏßÄÌÜµ</span><span className="text-xs text-gray-500">({trashEntries.length})</span>      
          </button>      
          <button onClick={() => handleStepChange('settings')} className="bg-white rounded-lg shadow-md p-4 flex flex-col items-center hover:shadow-lg transition-shadow">      
            <span className="text-2xl mb-2">‚öôÔ∏è</span><span className="text-sm font-medium text-gray-700">ÏÑ§Ï†ï</span><span className="text-xs text-gray-500">ÏòµÏÖò</span>      
          </button>      
        </div>      
        {diaryEntries.length > 0 && (      
          <div className="bg-white rounded-lg shadow-md p-6">      
            <h3 className="text-xl font-bold mb-4">ÏµúÍ∑º Í∞êÏ†ï Í∏∞Î°ù</h3>      
            <div className="space-y-4">      
              {diaryEntries.slice(0, 5).map((entry) => (      
                <div key={entry.id} className={`flex items-center justify-between p-3 bg-gradient-to-r ${getCurrentTheme().secondary} rounded-lg border border-${getCurrentTheme().accent.split('-')[0]}-100`}>      
                  <div className="flex items-center space-x-3 flex-1">      
                    <span className="text-2xl">{getMoodEmoji(entry.mood)}</span>      
                    <div className="flex-1">      
                      <p className={`font-medium text-${getCurrentTheme().accent.split('-')[0]}-800`}>{entry.date} {entry.time}</p>      
                      <p className={`text-sm text-${getCurrentTheme().accent.split('-')[0]}-600`}>{expandedDiaryId === entry.id ? entry.summary : `${entry.summary.substring(0, 50)}...`}</p>      
                      {entry.selectedEmotions?.length > 0 && (<p className={`text-xs text-${getCurrentTheme().accent.split('-')[0]}-500 mt-1`}>Í∞êÏ†ï: {entry.selectedEmotions.slice(0, 3).join(', ')}</p>)}      
                      {entry.musicPlayed?.length > 0 && (<p className="text-xs text-pink-500 mt-1">üéµ {entry.musicPlayed[0]?.title || 'Unknown Music'}</p>)}      
                    </div>      
                  </div>      
                  <div className="flex space-x-2">      
                    <button onClick={() => setExpandedDiaryId(expandedDiaryId === entry.id ? null : entry.id)} className="text-blue-500 hover:text-blue-700 p-1 rounded text-sm" title="Ï†ÑÏ≤¥ Î≥¥Í∏∞">{expandedDiaryId === entry.id ? 'Ï†ëÍ∏∞' : 'ÌéºÏπòÍ∏∞'}</button>      
                    <button onClick={() => moveToTrash(entry)} className="text-red-500 hover:text-red-700 p-1 rounded" title="Ìú¥ÏßÄÌÜµÏúºÎ°ú Ïù¥Îèô">üóëÔ∏è</button>      
                  </div>      
                </div>      
              ))}      
            </div>      
          </div>      
        )}      
        <div className="text-center mt-6"><button onClick={handleLogout} className="px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-all">Î°úÍ∑∏ÏïÑÏõÉ</button></div>      
      </div>      
    </div>      
  );

  const renderChat = () => (      
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>      
      <div className="max-w-4xl mx-auto">      
        {renderUserProgress()}      
        {renderTokenBar()}      
        <div className={`bg-gradient-to-r ${getCurrentTheme().secondary} rounded-lg shadow-lg p-6 mb-6 border border-${getCurrentTheme().accent.split('-')[0]}-200`}>      
          <div className="flex items-center justify-between mb-4">      
            <h2 className={`text-xl font-bold text-${getCurrentTheme().accent.split('-')[0]}-800`}>{AI_NAME}ÏôÄ ÎåÄÌôîÌïòÍ∏∞</h2>      
            <div className="flex items-center space-x-2">      
              <span className={`text-sm text-${getCurrentTheme().accent.split('-')[0]}-600`}>ÌòÑÏû¨ Í∏∞Î∂Ñ:</span>      
              <span className={`px-3 py-1 bg-${getCurrentTheme().accent.split('-')[0]}-100 text-${getCurrentTheme().accent.split('-')[0]}-800 rounded-full text-sm`}>{getMoodEmoji(currentMood || 'normal')} {getMoodText(currentMood || 'normal')}</span>      
            </div>      
          </div>      
          <div className={`h-96 overflow-y-auto mb-4 p-4 bg-gradient-to-br from-white to-${getCurrentTheme().accent.split('-')[0]}-50 rounded-lg border border-${getCurrentTheme().accent.split('-')[0]}-100`}>      
            {chatMessages.map((message, index) => (      
              <div key={index} className={`mb-4 ${message.role === 'user' ? 'text-right' : 'text-left'}`}>      
                <div className={`inline-block p-3 rounded-lg max-w-xs ${message.role === 'user' ? `bg-gradient-to-r ${getCurrentTheme().primary} text-white` : `bg-white text-${getCurrentTheme().accent.split('-')[0]}-800 border border-${getCurrentTheme().accent.split('-')[0]}-200`}`}>      
                  {message.role === 'assistant' && (<div className={`font-semibold mb-1 text-${getCurrentTheme().accent.split('-')[0]}-600`}>{AI_NAME}:</div>)}      
                  {message.content}      
                  {message.musicRecommendation && (      
                    <div className="mt-3 p-3 bg-gray-50 rounded-lg border">      
                      <div className="text-sm font-semibold text-gray-700 mb-2">üéµ Ï∂îÏ≤ú ÏùåÏïÖ</div>      
                      <div className="flex items-center space-x-2 mb-2">      
                        <img src={message.musicRecommendation.thumbnail} alt={message.musicRecommendation.title} className="w-12 h-12 object-cover rounded"/>      
                        <div className="flex-1">      
                          <p className="text-sm font-medium text-gray-800">{message.musicRecommendation.title}</p>      
                          <p className="text-xs text-gray-600">{message.musicRecommendation.artist}</p>      
                          <p className="text-xs text-purple-500">{message.musicRecommendation.source === 'spotify' ? 'Spotify' : 'YouTube'}</p>      
                        </div>      
                      </div>      
                      <div className="flex space-x-2">      
                        <a href={message.musicRecommendation.url} target="_blank" rel="noopener noreferrer" className={`flex-1 py-1 px-2 ${message.musicRecommendation.source === 'spotify' ? 'bg-green-500 hover:bg-green-600' : 'bg-red-500 hover:bg-red-600'} text-white rounded text-center text-xs`}>      
                          {message.musicRecommendation.source === 'spotify' ? 'SpotifyÏóêÏÑú Îì£Í∏∞' : 'YouTubeÏóêÏÑú Îì£Í∏∞'}      
                        </a>      
                        <button onClick={() => addChatMusicToMyList(message.musicRecommendation!)} className="flex-1 py-1 px-2 bg-blue-500 text-white rounded text-xs hover:bg-blue-600">ÎÇ¥ Î¶¨Ïä§Ìä∏ Ï∂îÍ∞Ä</button>      
                      </div>      
                    </div>      
                  )}      
                </div>      
              </div>      
            ))}      
            {isLoading && (      
              <div className="text-left">      
                <div className={`inline-block p-3 rounded-lg bg-white text-${getCurrentTheme().accent.split('-')[0]}-800 border border-${getCurrentTheme().accent.split('-')[0]}-200`}>      
                  <div className={`font-semibold mb-1 text-${getCurrentTheme().accent.split('-')[0]}-600`}>{AI_NAME}:</div>ÎãµÎ≥ÄÏùÑ Ï§ÄÎπÑÌïòÍ≥† ÏûàÏñ¥Ïöî... üíú      
                </div>      
              </div>      
            )}      
          </div>      
          <div className="flex space-x-2">      
            <input type="text" value={currentInput} onChange={(e) => setCurrentInput(e.target.value)} onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()} placeholder="Ïò§Îäò ÌïòÎ£® Ïñ¥Îñ†ÏÖ®ÎÇòÏöî?" className={`flex-1 px-4 py-2 border border-${getCurrentTheme().accent.split('-')[0]}-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-${getCurrentTheme().accent} bg-white`} disabled={isLoading}/>      
            <button onClick={handleSendMessage} disabled={isLoading} className={`px-6 py-2 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-lg hover:opacity-90 disabled:opacity-50`}>Ï†ÑÏÜ°</button>      
          </div>      
        </div>      
        <div className="flex space-x-4">      
            <button onClick={handleGenerateSummary} className="flex-1 py-3 bg-gradient-to-r from-blue-500 to-cyan-500 text-white rounded-lg font-semibold hover:opacity-90" disabled={chatMessages.length <= 1}>      
            üìù Í∞êÏ†ï ÏöîÏïΩÌïòÍ∏∞      
            </button>      
        </div>      
        <div className="flex space-x-4 mt-4">      
          <button onClick={() => handleStepChange('mood')} className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600">üè† ÌôàÏúºÎ°ú</button>      
        </div>      
      </div>      
    </div>      
  );

  const renderSummary = () => (      
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>      
      <div className="max-w-4xl mx-auto">      
        {renderTokenBar()}      
        <div className="text-center mb-8">      
          <h2 className="text-3xl font-bold text-gray-800 mb-2">üìù Ïò§ÎäòÏùò Í∞êÏ†ï ÏöîÏïΩ</h2>      
          <p className="text-gray-600">AIÍ∞Ä Î∂ÑÏÑùÌïú ÎÇ¥Ïö©ÏùÑ ÌôïÏù∏ÌïòÍ≥† Ï∂îÍ∞Ä Í∞êÏ†ïÏùÑ ÏÑ†ÌÉùÌï¥Î≥¥ÏÑ∏Ïöî</p>      
        </div>      
        {summaryData && (      
          <div className="space-y-6">      
            <div className="bg-white rounded-xl shadow-lg p-6">      
              <h3 className="text-xl font-bold mb-4 text-gray-800">üìñ Ïò§ÎäòÏùò Ïù¥ÏïºÍ∏∞</h3>      
              <p className="text-gray-700 leading-relaxed">{summaryData.summary}</p>      
            </div>      
            <div className="bg-white rounded-xl shadow-lg p-6">      
              <h3 className="text-xl font-bold mb-4 text-gray-800">üè∑Ô∏è Í∞êÏ†ï ÌÇ§ÏõåÎìú</h3>      
              <div className="flex flex-wrap gap-2">      
                {summaryData.keywords.map((keyword: string, index: number) => (<span key={index} className={`px-3 py-1 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-full text-sm`}>{keyword}</span>))}      
              </div>      
            </div>      
            <div className="bg-white rounded-xl shadow-lg p-6">      
              <h3 className="text-xl font-bold mb-4 text-gray-800">ü§ñ AI Ï∂îÏ≤ú ÏÑ∏Î∂Ä Í∞êÏ†ï</h3>      
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3 mb-4">      
                {summaryData.recommendedEmotions.map((emotion: string, index: number) => (<button key={index} onClick={() => handleEmotionSelect(emotion)} className={`p-3 rounded-lg text-sm font-medium transition-all border-2 ${selectedEmotions.includes(emotion) ? `bg-gradient-to-r ${getCurrentTheme().primary} text-white border-purple-500 shadow-lg transform scale-105` : 'bg-gray-50 text-gray-700 border-gray-200 hover:border-purple-300 hover:bg-purple-50'}`}>{emotion}</button>))}      
              </div>      
              <p className="text-xs text-gray-500">ÏµúÎåÄ 2Í∞úÍπåÏßÄ ÏÑ†ÌÉù Í∞ÄÎä• (ÏÑ†ÌÉùÌïú Í∞êÏ†ï: {selectedEmotions.length}/2)</p>      
            </div>      
            <div className="bg-white rounded-xl shadow-lg p-6">      
              <h3 className="text-xl font-bold mb-4 text-gray-800">üí≠ ÎÇòÏùò Ïò§Îäò Í∞êÏ†ï</h3>      
              <p className="text-gray-600 text-sm mb-3">Ïò§Îäò Í∞ÄÏû• ÌÅ¨Í≤å ÎäêÎÇÄ Í∞êÏ†ïÏùÑ Ìïú Í∞ÄÏßÄÎßå ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî</p>      
              <input type="text" value={userMainEmotion} onChange={(e) => setUserMainEmotion(e.target.value)} placeholder="Ïòà: ÌñâÎ≥µ, Í±±Ï†ï, ÏÑ§Î†ò, ÌîºÍ≥§Ìï® Îì±" className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-lg" maxLength={10}/>      
              <p className="text-xs text-gray-500 mt-2">ÏµúÎåÄ 10ÏûêÍπåÏßÄ ÏûÖÎ†• Í∞ÄÎä•</p>      
            </div>      
            <div className="bg-white rounded-xl shadow-lg p-6">      
              <h3 className="text-xl font-bold mb-4 text-gray-800">üéØ Ï∂îÏ≤ú Ïï°ÏÖò</h3>      
              <div className="space-y-2">      
                {summaryData.actionItems.map((item: string, index: number) => (<div key={index} className="flex items-center space-x-2 p-3 bg-gray-50 rounded-lg"><span className="text-green-500">‚úÖ</span><span className="text-gray-700">{item}</span></div>))}      
              </div>      
            </div>      
            {summaryData.recommendedMusic && summaryData.recommendedMusic.length > 0 && (      
              <div className="bg-white rounded-xl shadow-lg p-6">      
                <h3 className="text-xl font-bold mb-4 text-gray-800">üéµ Í∞êÏ†ï ÎßûÏ∂§ Ï∂îÏ≤ú ÏùåÏïÖ</h3>      
                <p className="text-sm text-gray-600 mb-4">ÎãπÏã†Ïùò ÎåÄÌôîÏôÄ Í∞êÏ†ïÏùÑ Î∂ÑÏÑùÌï¥ÏÑú ÏÑ†Î≥ÑÌïú ÏùåÏïÖÏûÖÎãàÎã§</p>  
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">      
                  {summaryData.recommendedMusic.map((music: MusicItem, index: number) => (      
                    <div key={index} className="flex items-center space-x-3 p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-200">      
                      <img src={music.thumbnail} alt={music.title} className="w-16 h-16 object-cover rounded-lg shadow-md"/>      
                      <div className="flex-1">      
                        <p className="text-sm font-bold text-gray-800 mb-1">{music.title}</p>      
                        <p className="text-xs text-gray-600 mb-2">{music.artist}</p>      
                        <p className="text-xs text-purple-600 font-medium">{music.source === 'spotify' ? 'üéß Spotify' : 'üé¨ YouTube'}</p>      
                      </div>      
                      <div className="flex flex-col space-y-2">      
                        <a href={music.url} target="_blank" rel="noopener noreferrer" className={`py-2 px-4 ${music.source === 'spotify' ? 'bg-green-500 hover:bg-green-600' : 'bg-red-500 hover:bg-red-600'} text-white rounded-lg text-xs text-center font-medium transition-all`}>      
                          Îì£Í∏∞      
                        </a>      
                        <button onClick={() => addToPersonalMusic(music)} className="py-2 px-4 bg-blue-500 text-white rounded-lg text-xs hover:bg-blue-600 transition-all font-medium">      
                          Ï†ÄÏû•      
                        </button>      
                      </div>      
                    </div>      
                  ))}      
                </div>      
              </div>      
            )}      
            {recommendedMusicForSummary.length > 0 && (      
              <div className="bg-white rounded-xl shadow-lg p-6">      
                <h3 className="text-xl font-bold mb-4 text-gray-800">üéµ Í∞êÏ†ïÏóê ÎßûÎäî Ï∂îÏ≤ú ÏùåÏïÖ</h3>      
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">      
                  {recommendedMusicForSummary.map((music, index) => (      
                    <div key={index} className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg border">      
                      <img src={music.thumbnail} alt={music.title} className="w-16 h-16 object-cover rounded"/>      
                      <div className="flex-1">      
                        <p className="text-sm font-medium text-gray-800">{music.title}</p>      
                        <p className="text-xs text-gray-600">{music.artist}</p>      
                        <p className="text-xs text-purple-500">{music.source === 'spotify' ? 'Spotify' : 'YouTube'}</p>      
                      </div>      
                      <div className="flex flex-col space-y-1">      
                        <a href={music.url} target="_blank" rel="noopener noreferrer" className={`py-1 px-3 ${music.source === 'spotify' ? 'bg-green-500 hover:bg-green-600' : 'bg-red-500 hover:bg-red-600'} text-white rounded text-xs text-center`}>      
                          üéß Îì£Í∏∞      
                        </a>      
                        <button onClick={() => addToPersonalMusic(music)} className="py-1 px-3 bg-blue-500 text-white rounded text-xs hover:bg-blue-600">      
                          Ï∂îÍ∞Ä      
                        </button>      
                      </div>      
                    </div>      
                  ))}      
                </div>      
              </div>      
            )}      
            <div className="text-center">      
              <button onClick={handleSaveDiary} disabled={isLoading} className={`px-8 py-3 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-lg font-bold text-lg hover:opacity-90 transition-all disabled:opacity-50`}>üíæ ÏùºÍ∏∞ Ï†ÄÏû•ÌïòÍ∏∞ (+20 EXP)</button>      
            </div>      
          </div>      
        )}      
        <div className="text-center mt-6">      
          <button onClick={() => handleStepChange('chat')} className="px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-all">ÎåÄÌôîÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞</button>      
        </div>      
      </div>      
    </div>      
  );

  const renderStats = () => {      
    const moodStats = ['good', 'normal', 'bad'].map(mood => {      
        const count = diaryEntries.filter(entry => entry.mood === mood).length;      
        const percentage = diaryEntries.length > 0 ? (count / diaryEntries.length) * 100 : 0;      
        return { mood, count, percentage };      
    });      
    const emotionFreq: { [key: string]: number } = {};      
    diaryEntries.forEach(entry => {      
        entry.selectedEmotions?.forEach(emotion => {      
            emotionFreq[emotion] = (emotionFreq[emotion] || 0) + 1;      
        });      
    });      
    const topEmotions = Object.entries(emotionFreq).sort(([,a], [,b]) => b - a).slice(0, 5);      
    const monthNames = ['1Ïõî', '2Ïõî', '3Ïõî', '4Ïõî', '5Ïõî', '6Ïõî', '7Ïõî', '8Ïõî', '9Ïõî', '10Ïõî', '11Ïõî', '12Ïõî'];      
    const dayNames = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'];

    const getCalendarData = (month: Date) => {      
        const startOfMonth = new Date(month.getFullYear(), month.getMonth(), 1);      
        const startDate = new Date(startOfMonth);      
        startDate.setDate(startDate.getDate() - startDate.getDay());      
        const calendarData = [];      
        for (let week = 0; week < 6; week++) {      
            const weekData = [];      
            for (let day = 0; day < 7; day++) {      
                const currentDate = new Date(startDate);      
                currentDate.setDate(startDate.getDate() + (week * 7) + day);      
                const dayEntries = diaryEntries.filter(entry => new Date(entry.date).toDateString() === currentDate.toDateString());      
                weekData.push({      
                    date: currentDate,      
                    entries: dayEntries,      
                    isCurrentMonth: currentDate.getMonth() === month.getMonth(),      
                    isToday: currentDate.toDateString() === new Date().toDateString()      
                });      
            }      
            calendarData.push(weekData);      
        }      
        return calendarData;      
    };      
    const calendarData = getCalendarData(currentCalendarMonth);

    return (      
        <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>      
            <div className="max-w-4xl mx-auto">      
                {renderTokenBar()}      
                <div className="bg-white rounded-lg shadow-lg p-6 mb-6">      
                    <div className="flex items-center justify-between mb-6">      
                        <h2 className="text-2xl font-bold">üìä ÌÜµÍ≥Ñ & üìÖ Í∞êÏ†ï Îã¨Î†•</h2>      
                        <button onClick={() => handleStepChange('mood')} className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600">üè† ÌôàÏúºÎ°ú</button>      
                    </div>      
                    <div className="mb-8">      
                        <h3 className="text-xl font-bold mb-4">üìä ÌÜµÍ≥Ñ</h3>      
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">      
                            <div className={`bg-gradient-to-r ${getCurrentTheme().primary} text-white p-6 rounded-lg`}><h4 className="text-lg font-semibold mb-2">Ï¥ù ÏùºÍ∏∞ Ïàò</h4><p className="text-3xl font-bold">{diaryEntries.length}</p></div>      
                            <div className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white p-6 rounded-lg"><h4 className="text-lg font-semibold mb-2">Ï†ÄÏû•Îêú ÏùåÏïÖ</h4><p className="text-3xl font-bold">{personalMusic.length}</p></div>      
                            <div className="bg-gradient-to-r from-green-500 to-teal-500 text-white p-6 rounded-lg"><h4 className="text-lg font-semibold mb-2">ÌòÑÏû¨ Î†àÎ≤®</h4><p className="text-3xl font-bold">{userProgress.level}</p></div>      
                            <div className="bg-gradient-to-r from-yellow-500 to-orange-500 text-white p-6 rounded-lg"><h4 className="text-lg font-semibold mb-2">Ï¥ù Í≤ΩÌóòÏπò</h4><p className="text-3xl font-bold">{userProgress.experience}</p></div>      
                        </div>      
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">      
                            <div className="bg-gray-50 p-6 rounded-lg">      
                                <h4 className="text-lg font-semibold mb-4">Í∏∞Î∂Ñ Î∂ÑÌè¨</h4>      
                                <div className="space-y-3">      
                                    {moodStats.map(({ mood, count, percentage }) => (<div key={mood} className="flex items-center space-x-3"><span className="text-2xl">{getMoodEmoji(mood)}</span><div className="flex-1"><div className="flex justify-between text-sm mb-1"><span>{getMoodText(mood)}</span><span>{count}Í∞ú ({percentage.toFixed(1)}%)</span></div><div className={`w-full bg-${getCurrentTheme().accent.split('-')[0]}-100 rounded-full h-2`}><div className={`bg-gradient-to-r ${getCurrentTheme().primary} h-2 rounded-full transition-all`} style={{ width: `${percentage}%` }}/></div></div></div>))}      
                                </div>      
                            </div>      
                            <div className="bg-gray-50 p-6 rounded-lg">      
                                <h4 className="text-lg font-semibold mb-4">ÏûêÏ£º ÎäêÎÅºÎäî Í∞êÏ†ï TOP 5</h4>      
                                <div className="space-y-2">{topEmotions.length > 0 ? topEmotions.map(([emotion, count], index) => (<div key={emotion} className="flex items-center justify-between"><div className="flex items-center space-x-2"><span className="text-lg">{index + 1}</span><span className="font-medium">{emotion}</span></div><span className="text-sm text-gray-600">{count}Ìöå</span></div>)) : (<p className="text-gray-500 text-sm">ÏïÑÏßÅ Í∞êÏ†ï Îç∞Ïù¥ÌÑ∞Í∞Ä Î∂ÄÏ°±Ìï¥Ïöî</p>)}</div>      
                            </div>      
                        </div>      
                    </div>      
                    <div>      
                        <h3 className="text-xl font-bold mb-4">üìÖ Í∞êÏ†ï Îã¨Î†•</h3>      
                        <div className="flex items-center justify-between mb-6">      
                            <button onClick={() => setCurrentCalendarMonth(prev => new Date(prev.getFullYear(), prev.getMonth() - 1, 1))} className={`px-4 py-2 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-lg hover:opacity-90`}>‚Üê Ïù¥Ï†Ñ</button>      
                            <h4 className="text-lg font-bold">{currentCalendarMonth.getFullYear()}ÎÖÑ {monthNames[currentCalendarMonth.getMonth()]}</h4>      
                            <button onClick={() => setCurrentCalendarMonth(prev => new Date(prev.getFullYear(), prev.getMonth() + 1, 1))} className={`px-4 py-2 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-lg hover:opacity-90`}>Îã§Ïùå ‚Üí</button>      
                        </div>      
                        <div className="grid grid-cols-7 gap-1 mb-2">{dayNames.map((day) => (<div key={day} className="p-2 text-center font-semibold text-gray-600">{day}</div>))}</div>      
                        <div className="grid grid-cols-7 gap-1 mb-4">      
                            {calendarData.flat().map((day, index) => (<div key={index} className={`p-2 h-16 border rounded ${day.isCurrentMonth ? 'bg-white' : 'bg-gray-100'} ${day.isToday ? `ring-2 ring-${getCurrentTheme().accent}` : ''}`}><div className="text-xs font-medium">{day.date.getDate()}</div>{day.entries.length > 0 && (<div className="flex flex-wrap gap-1 mt-1">{day.entries.map((entry) => (<div key={entry.id} className="relative group"><div className="w-2 h-2 rounded-full cursor-pointer" style={{ backgroundColor: entry.mood === 'good' ? '#10b981' : entry.mood === 'normal' ? '#f59e0b' : '#ef4444' }}/><div className="absolute bottom-full left-0 mb-2 w-40 p-2 bg-black text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity z-10"><p className="font-bold">{getMoodText(entry.mood)}: {entry.summary.substring(0, 30)}...</p></div></div>))}</div>)}</div>))}      
                        </div>      
                        <div className="flex justify-center space-x-6"><div className="flex items-center space-x-2"><div className="w-3 h-3 bg-green-500 rounded-full"></div><span className="text-xs">Ï¢ãÏùå</span></div><div className="flex items-center space-x-2"><div className="w-3 h-3 bg-yellow-500 rounded-full"></div><span className="text-xs">Î≥¥ÌÜµ</span></div><div className="flex items-center space-x-2"><div className="w-3 h-3 bg-red-500 rounded-full"></div><span className="text-xs">ÎÇòÏÅ®</span></div></div>      
                    </div>      
                </div>      
            </div>      
        </div>      
    );      
  };

  const renderMyDiary = () => (      
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>      
      <div className="max-w-4xl mx-auto">      
        <div className="text-center mb-8">      
          <h2 className="text-3xl font-bold text-gray-800 mb-2">üìñ ÎÇ¥ ÏùºÍ∏∞Ïû•</h2>      
          <p className="text-gray-600">Ï¥ù {diaryEntries.length}Í∞úÏùò Í∏∞Î°ùÏù¥ ÏûàÏñ¥Ïöî</p>      
        </div>      
        {diaryEntries.length === 0 ? (<div className="text-center"><div className="text-4xl mb-4">üìù</div><p className="text-lg text-gray-600">ÏïÑÏßÅ ÏûëÏÑ±Îêú ÏùºÍ∏∞Í∞Ä ÏóÜÏñ¥Ïöî</p><button onClick={() => handleStepChange('mood')} className={`mt-4 px-6 py-3 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-lg font-semibold hover:opacity-90 transition-all`}>Ï≤´ ÏùºÍ∏∞ ÏûëÏÑ±ÌïòÍ∏∞</button></div>) : (      
          <div className="space-y-6">      
            {diaryEntries.map((entry) => (      
              <div key={entry.id} className="bg-white rounded-xl shadow-lg p-6">      
                <div className="flex items-center justify-between mb-4">      
                  <div className="flex items-center space-x-3"><span className="text-2xl">{getMoodEmoji(entry.mood)}</span><div><h3 className="font-bold text-gray-800">{entry.date} {entry.time}</h3><p className="text-sm text-gray-600">Í∏∞Î∂Ñ: {getMoodText(entry.mood)}</p></div></div>      
                  <button onClick={() => moveToTrash(entry)} className="text-red-500 hover:text-red-700 p-2 rounded-lg hover:bg-red-50 transition-all" title="Ìú¥ÏßÄÌÜµÏúºÎ°ú Ïù¥Îèô">üóëÔ∏è</button>      
                </div>      
                <div className="space-y-4">      
                  <div><h4 className="font-semibold text-gray-700 mb-2">ÏöîÏïΩ</h4><p className="text-gray-600">{entry.summary}</p></div>      
                  {entry.keywords?.length > 0 && (<div><h4 className="font-semibold text-gray-700 mb-2">ÌÇ§ÏõåÎìú</h4><div className="flex flex-wrap gap-2">{entry.keywords.map((keyword, index) => (<span key={index} className={`px-2 py-1 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-full text-xs`}>{keyword}</span>))}</div></div>)}      
                  {entry.selectedEmotions?.length > 0 && (<div><h4 className="font-semibold text-gray-700 mb-2">ÏÑ†ÌÉùÌïú Í∞êÏ†ï</h4><div className="flex flex-wrap gap-2">{entry.selectedEmotions.map((emotion, index) => (<span key={index} className="px-3 py-1 bg-purple-100 text-purple-700 rounded-full text-sm">{emotion}</span>))}</div></div>)}      
                  {entry.musicPlayed?.length > 0 && (<div><h4 className="font-semibold text-gray-700 mb-2">Îì§ÏóàÎçò ÏùåÏïÖ</h4><div className="space-y-2">{entry.musicPlayed.slice(0, 3).map((music, index) => (<div key={index} className="flex items-center space-x-3 p-2 bg-gray-50 rounded-lg"><img src={music.thumbnail || '/placeholder-music.png'} alt={music.title} className="w-10 h-10 object-cover rounded"/><div className="flex-1"><p className="text-sm font-medium text-gray-800">{music.title}</p><p className="text-xs text-gray-600">{music.artist}</p></div><a href={music.url} target="_blank" rel="noopener noreferrer" className={`text-xs px-2 py-1 rounded ${music.source === 'spotify' ? 'text-green-500 hover:text-green-700' : 'text-red-500 hover:text-red-700'}`}>üéß Îì£Í∏∞</a></div>))}</div></div>)}      
                  {entry.actionItems?.length > 0 && (<div><h4 className="font-semibold text-gray-700 mb-2">Ïï°ÏÖò ÏïÑÏù¥ÌÖú</h4><div className="space-y-1">{entry.actionItems.map((item, index) => (<div key={index} className="flex items-center space-x-2"><span className="text-green-500">‚úÖ</span><span className="text-sm text-gray-600">{item}</span></div>))}</div></div>)}      
                </div>      
              </div>      
            ))}      
          </div>      
        )}      
        <div className="text-center mt-6"><button onClick={() => handleStepChange('mood')} className="px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-all">üè† ÌôàÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞</button></div>      
      </div>      
    </div>      
  );

  const renderMyMusic = () => (      
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>      
        <div className="max-w-4xl mx-auto">      
            <div className="text-center mb-8">      
                <h2 className="text-3xl font-bold text-gray-800 mb-2">üéµ ÎÇ¥ ÏùåÏïÖ</h2>      
                <p className="text-gray-600">Ï¥ù {personalMusic.length}Í≥°Ïù¥ Ï†ÄÏû•ÎêòÏñ¥ ÏûàÏñ¥Ïöî</p>      
            </div>      
            {personalMusic.length === 0 ? (<div className="text-center"><div className="text-4xl mb-4">üé∂</div><p className="text-lg text-gray-600">ÏïÑÏßÅ Ï†ÄÏû•Îêú ÏùåÏïÖÏù¥ ÏóÜÏñ¥Ïöî</p><button onClick={() => handleStepChange('mood')} className={`mt-4 px-6 py-3 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-lg font-semibold hover:opacity-90 transition-all`}>ÏùºÍ∏∞ Ïì∞Í≥† ÏùåÏïÖ Ï∂îÏ≤úÎ∞õÍ∏∞</button></div>) : (      
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">      
                    {personalMusic.map((music) => (      
                        <div key={music.id} className="bg-white rounded-xl shadow-lg p-6">      
                            <div className="flex items-center space-x-4 mb-4">      
                                <img src={music.thumbnail} alt={music.title} className="w-16 h-16 object-cover rounded-lg"/>      
                                <div className="flex-1">      
                                    <h3 className="font-bold text-gray-800 text-sm line-clamp-2">{music.title}</h3>      
                                    <p className="text-gray-600 text-xs">{music.artist}</p>      
                                    {music.playCount && (<p className="text-xs text-purple-500 mt-1">{music.playCount}Î≤à Ïû¨ÏÉù</p>)}      
                                </div>      
                            </div>      
                            <div className="space-y-2">      
                                <div className="flex space-x-2">
                                    <a href={music.url} target="_blank" rel="noopener noreferrer" className={`flex-1 block py-2 px-4 ${music.source === 'spotify' ? 'bg-green-500 hover:bg-green-600' : 'bg-red-500 hover:bg-red-600'} text-white rounded-lg text-center text-sm transition-all`}>üéß Îì£Í∏∞</a>
                                    <button onClick={() => removeFromPersonalMusic(music.id)} className="py-2 px-4 bg-red-500 text-white rounded-lg text-sm hover:bg-red-600 transition-all">ÏÇ≠Ï†ú</button>
                                </div>     
                                {music.preview_url && (<audio controls className="w-full h-10"><source src={music.preview_url} type="audio/mpeg"/>ÎØ∏Î¶¨Îì£Í∏∞ ÎØ∏ÏßÄÏõê</audio>)}      
                            </div>      
                        </div>      
                    ))}      
                </div>      
            )}      
            <div className="text-center mt-6"><button onClick={() => handleStepChange('mood')} className="px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-all">üè† ÌôàÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞</button></div>      
        </div>      
    </div>      
  );

  const renderSearch = () => {      
    const searchResults = searchDiaries(searchQuery);      
    return (      
      <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>      
        <div className="max-w-4xl mx-auto">      
          <div className="text-center mb-8"><h2 className="text-3xl font-bold text-gray-800 mb-2">üîç ÏùºÍ∏∞ Í≤ÄÏÉâ</h2><p className="text-gray-600">ÌÇ§ÏõåÎìúÎ°ú ÏßÄÎÇú Í∏∞Î°ùÎì§ÏùÑ Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî</p></div>      
          <div className="bg-white rounded-xl shadow-lg p-6 mb-6"><input type="text" value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} placeholder="Í≤ÄÏÉâÌï† ÌÇ§ÏõåÎìúÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Í∞êÏ†ï, ÏùåÏïÖ, ÎÇ¥Ïö© Îì±)" className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 text-lg"/></div>      
          {searchQuery.trim() && (      
            <div className="mb-6"><h3 className="text-xl font-bold mb-4 text-gray-800">Í≤ÄÏÉâ Í≤∞Í≥º: {searchResults.length}Í∞ú</h3>{searchResults.length === 0 ? (<div className="text-center bg-white rounded-xl shadow-lg p-8"><div className="text-4xl mb-4">üòÖ</div><p className="text-lg text-gray-600">Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏñ¥Ïöî</p></div>) : (<div className="space-y-4">{searchResults.map((entry) => (<div key={entry.id} className="bg-white rounded-xl shadow-lg p-6"><div className="flex items-center space-x-3 mb-3"><span className="text-2xl">{getMoodEmoji(entry.mood)}</span><div><h4 className="font-bold text-gray-800">{entry.date} {entry.time}</h4><p className="text-sm text-gray-600">Í∏∞Î∂Ñ: {getMoodText(entry.mood)}</p></div></div><p className="text-gray-700 mb-3">{entry.summary}</p>{entry.selectedEmotions?.length > 0 && (<div className="mb-3"><span className="text-sm font-semibold text-gray-600">Í∞êÏ†ï: </span>{entry.selectedEmotions.slice(0, 3).join(', ')}</div>)}{entry.musicPlayed?.length > 0 && (<div className="mb-3"><span className="text-sm font-semibold text-gray-600">ÏùåÏïÖ: </span>{entry.musicPlayed[0]?.title || 'Unknown Music'}</div>)}{entry.keywords?.length > 0 && (<div className="flex flex-wrap gap-2">{entry.keywords.map((keyword, index) => (<span key={index} className={`px-2 py-1 bg-gradient-to-r ${getCurrentTheme().primary} text-white rounded-full text-xs`}>{keyword}</span>))}</div>)}</div>))}</div>)}</div>      
          )}      
          <div className="text-center"><button onClick={() => handleStepChange('mood')} className="px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-all">üè† ÌôàÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞</button></div>      
        </div>      
      </div>      
    );      
  };

  const renderTrash = () => (      
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>      
        <div className="max-w-4xl mx-auto">      
            <div className="text-center mb-8"><h2 className="text-3xl font-bold text-gray-800 mb-2">üóëÔ∏è Ìú¥ÏßÄÌÜµ</h2><p className="text-gray-600">ÏÇ≠Ï†úÎêú {trashEntries.length}Í∞úÏùò ÏùºÍ∏∞Í∞Ä ÏûàÏñ¥Ïöî</p></div>      
            {trashEntries.length === 0 ? (<div className="text-center bg-white rounded-xl shadow-lg p-8"><div className="text-4xl mb-4">üóëÔ∏è</div><p className="text-lg text-gray-600">Ìú¥ÏßÄÌÜµÏù¥ ÎπÑÏñ¥ÏûàÏñ¥Ïöî</p></div>) : (      
                <div className="space-y-4">      
                    {trashEntries.map((entry) => (      
                        <div key={entry.id} className="bg-white rounded-xl shadow-lg p-6">      
                            <div className="flex items-center justify-between mb-4">      
                                <div className="flex items-center space-x-3"><span className="text-2xl">{getMoodEmoji(entry.mood)}</span><div><h4 className="font-bold text-gray-800">{entry.date} {entry.time}</h4><p className="text-sm text-gray-600">Í∏∞Î∂Ñ: {getMoodText(entry.mood)}</p>{entry.deletedAt && (<p className="text-xs text-red-500">ÏÇ≠Ï†úÏùº: {new Date(entry.deletedAt).toLocaleString('ko-KR')}</p>)}</div></div>      
                                <div className="flex space-x-2"><button onClick={() => restoreFromTrash(entry)} className="px-3 py-1 bg-green-500 text-white rounded-lg text-sm hover:bg-green-600 transition-all">Î≥µÏõê</button><button onClick={async () => { if (window.confirm('Ï†ïÎßêÎ°ú ÏòÅÍµ¨ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) { try { await deleteDoc(doc(db, 'diaries', entry.id)); setTrashEntries(prev => prev.filter(e => e.id !== entry.id)); } catch (error) { console.error('ÏòÅÍµ¨ ÏÇ≠Ï†ú Ïò§Î•ò:', error); } } }} className="px-3 py-1 bg-red-500 text-white rounded-lg text-sm hover:bg-red-600 transition-all">ÏòÅÍµ¨ÏÇ≠Ï†ú</button></div>      
                            </div>      
                            <p className="text-gray-700">{entry.summary.substring(0, 100)}...</p>      
                        </div>      
                    ))}      
                </div>      
            )}      
            <div className="text-center mt-6"><button onClick={() => handleStepChange('mood')} className="px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-all">üè† ÌôàÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞</button></div>      
        </div>      
    </div>      
  );

  const renderSettings = () => (      
    <div className={`min-h-screen bg-gradient-to-br ${getCurrentTheme().bgClass} p-4`}>      
      <div className="max-w-4xl mx-auto">      
        <div className="text-center mb-8"><h2 className="text-3xl font-bold text-gray-800 mb-2">‚öôÔ∏è ÏÑ§Ï†ï</h2><p className="text-gray-600">Ïï± ÏÑ§Ï†ïÏùÑ Í¥ÄÎ¶¨Ìï©ÎãàÎã§.</p></div>      
        <div className="space-y-6">      
          <div className="bg-white rounded-xl shadow-lg p-6">      
            <h3 className="text-xl font-bold mb-4 text-gray-800">ÏïåÎ¶º ÏÑ§Ï†ï</h3>      
            <div className="flex items-center justify-between">      
              <span className="text-gray-700">ÏùºÍ∏∞ ÏûëÏÑ± ÏïåÎ¶º</span>      
              <button onClick={() => setAppSettings(prev => ({ ...prev, notifications: !prev.notifications }))} className={`w-12 h-6 rounded-full transition-all ${appSettings.notifications ? 'bg-green-500' : 'bg-gray-300'}`}><div className={`w-5 h-5 bg-white rounded-full transition-all ${appSettings.notifications ? 'translate-x-6' : 'translate-x-0.5'}`}></div></button>      
            </div>      
          </div>      
          <div className="bg-white rounded-xl shadow-lg p-6">      
            <h3 className="text-xl font-bold mb-4 text-gray-800">Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨</h3>      
            <div className="space-y-3">      
              <div className="flex justify-between items-center"><span className="text-gray-700">Ï¥ù ÏùºÍ∏∞ Ïàò</span><span className="font-semibold text-gray-800">{diaryEntries.length}Í∞ú</span></div>      
              <div className="flex justify-between items-center"><span className="text-gray-700">Ï†ÄÏû•Îêú ÏùåÏïÖ</span><span className="font-semibold text-gray-800">{personalMusic.length}Í≥°</span></div>      
              <div className="flex justify-between items-center"><span className="text-gray-700">Ìú¥ÏßÄÌÜµ</span><span className="font-semibold text-gray-800">{trashEntries.length}Í∞ú</span></div>      
              <button onClick={async () => {      
                  if (window.confirm('Ï†ïÎßêÎ°ú Î™®Îì† Îç∞Ïù¥ÌÑ∞Î•º Ï¥àÍ∏∞ÌôîÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.')) {      
                    if (!user) return;      
                    try {      
                      alert('Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.');      
                      loadUserData(user.uid);      
                    } catch (error) {      
                      console.error('Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî Ïò§Î•ò:', error);      
                    }      
                  }      
                }} className="w-full mt-4 py-2 px-4 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-all">Î™®Îì† Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî</button>      
            </div>      
          </div>      
        </div>      
        <div className="text-center mt-6"><button onClick={() => handleStepChange('mood')} className="px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-all">üè† ÌôàÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞</button></div>      
      </div>      
    </div>      
  );

  if (!user) {      
    return renderAuth();      
  }

  switch (currentStep) {      
    case 'onboard-name': return renderOnboardName();    
    case 'onboard-music': return renderOnboardMusic();    
    case 'mood': return renderMoodSelection();      
    case 'chat': return renderChat();      
    case 'summary': return renderSummary();      
    case 'stats': return renderStats();      
    case 'myDiary': return renderMyDiary();      
    case 'myMusic': return renderMyMusic();      
    case 'search': return renderSearch();      
    case 'trash': return renderTrash();      
    case 'settings': return renderSettings();      
    default: return renderMoodSelection();      
  }      
};

export default App;